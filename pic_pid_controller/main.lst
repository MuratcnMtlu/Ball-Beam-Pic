CCS PCM C Compiler, Version 5.112, 5967               22-Ara-23 03:21

               Filename:   C:\Users\Muratcan\Documents\GitHub\Ball-Beam-Pic\pic_pid_controller\main.lst

               ROM used:   1261 words (15%)
                           Largest free fragment is 2048
               RAM used:   56 (15%) at main() level
                           83 (23%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   49D
0003:  NOP
.................... #include <main.h>
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA ED,32
0005:  DATA F3,30
0006:  DATA E6,32
0007:  DATA A0,1E
0008:  DATA A0,12
0009:  DATA E6,06
000A:  DATA 0A,00
000B:  DATA D3,32
000C:  DATA EC,31
000D:  DATA F5,35
000E:  DATA 20,23
000F:  DATA F5,31
0010:  DATA EB,34
0011:  DATA 6E,00
0012:  DATA CB,24
0013:  DATA DA,24
0014:  DATA 52,00
*
019D:  MOVF   0B,W
019E:  MOVWF  53
019F:  BCF    0B.7
01A0:  BSF    03.5
01A1:  BSF    03.6
01A2:  BSF    0C.7
01A3:  BSF    0C.0
01A4:  NOP
01A5:  NOP
01A6:  BCF    03.5
01A7:  BCF    03.6
01A8:  BTFSC  53.7
01A9:  BSF    0B.7
01AA:  BSF    03.6
01AB:  MOVF   0C,W
01AC:  ANDLW  7F
01AD:  BTFSC  03.2
01AE:  GOTO   1F1
01AF:  BCF    03.6
01B0:  MOVWF  53
01B1:  BSF    03.6
01B2:  MOVF   0D,W
01B3:  BCF    03.6
01B4:  MOVWF  54
01B5:  BSF    03.6
01B6:  MOVF   0F,W
01B7:  BCF    03.6
01B8:  MOVWF  55
01B9:  MOVF   53,W
01BA:  MOVWF  56
01BB:  CALL   171
01BC:  MOVF   54,W
01BD:  BSF    03.6
01BE:  MOVWF  0D
01BF:  BCF    03.6
01C0:  MOVF   55,W
01C1:  BSF    03.6
01C2:  MOVWF  0F
01C3:  BCF    03.6
01C4:  MOVF   0B,W
01C5:  MOVWF  56
01C6:  BCF    0B.7
01C7:  BSF    03.5
01C8:  BSF    03.6
01C9:  BSF    0C.7
01CA:  BSF    0C.0
01CB:  NOP
01CC:  NOP
01CD:  BCF    03.5
01CE:  BCF    03.6
01CF:  BTFSC  56.7
01D0:  BSF    0B.7
01D1:  BSF    03.6
01D2:  RLF    0C,W
01D3:  RLF    0E,W
01D4:  ANDLW  7F
01D5:  BTFSC  03.2
01D6:  GOTO   1F1
01D7:  BCF    03.6
01D8:  MOVWF  53
01D9:  BSF    03.6
01DA:  MOVF   0D,W
01DB:  BCF    03.6
01DC:  MOVWF  54
01DD:  BSF    03.6
01DE:  MOVF   0F,W
01DF:  BCF    03.6
01E0:  MOVWF  55
01E1:  MOVF   53,W
01E2:  MOVWF  56
01E3:  CALL   171
01E4:  MOVF   54,W
01E5:  BSF    03.6
01E6:  MOVWF  0D
01E7:  BCF    03.6
01E8:  MOVF   55,W
01E9:  BSF    03.6
01EA:  MOVWF  0F
01EB:  INCF   0D,F
01EC:  BTFSC  03.2
01ED:  INCF   0F,F
01EE:  BCF    03.6
01EF:  GOTO   19D
01F0:  BSF    03.6
01F1:  BCF    03.6
01F2:  RETURN
*
01FB:  MOVF   61,W
01FC:  BTFSC  03.2
01FD:  GOTO   26B
01FE:  MOVWF  69
01FF:  MOVF   65,W
0200:  BTFSC  03.2
0201:  GOTO   26B
0202:  ADDWF  69,F
0203:  BTFSC  03.0
0204:  GOTO   20C
0205:  MOVLW  7F
0206:  SUBWF  69,F
0207:  BTFSS  03.0
0208:  GOTO   26B
0209:  BTFSC  03.2
020A:  GOTO   26B
020B:  GOTO   210
020C:  MOVLW  81
020D:  ADDWF  69,F
020E:  BTFSC  03.0
020F:  GOTO   26B
0210:  MOVF   69,W
0211:  MOVWF  77
0212:  CLRF   78
0213:  CLRF   79
0214:  CLRF   7A
0215:  MOVF   62,W
0216:  MOVWF  6D
0217:  BSF    6D.7
0218:  MOVF   63,W
0219:  MOVWF  6C
021A:  MOVF   64,W
021B:  MOVWF  6B
021C:  MOVLW  18
021D:  MOVWF  69
021E:  CLRF   6A
021F:  BTFSS  6B.0
0220:  GOTO   239
0221:  MOVF   68,W
0222:  ADDWF  7A,F
0223:  BTFSS  03.0
0224:  GOTO   22B
0225:  INCF   79,F
0226:  BTFSS  03.2
0227:  GOTO   22B
0228:  INCF   78,F
0229:  BTFSC  03.2
022A:  BSF    6A.7
022B:  MOVF   67,W
022C:  ADDWF  79,F
022D:  BTFSS  03.0
022E:  GOTO   232
022F:  INCF   78,F
0230:  BTFSC  03.2
0231:  BSF    6A.7
0232:  MOVF   66,W
0233:  MOVWF  63
0234:  BSF    63.7
0235:  MOVF   63,W
0236:  ADDWF  78,F
0237:  BTFSC  03.0
0238:  BSF    6A.7
0239:  RLF    6A,F
023A:  RRF    78,F
023B:  RRF    79,F
023C:  RRF    7A,F
023D:  RRF    6D,F
023E:  RRF    6C,F
023F:  RRF    6B,F
0240:  BCF    03.0
0241:  DECFSZ 69,F
0242:  GOTO   21E
0243:  MOVLW  01
0244:  ADDWF  77,F
0245:  BTFSC  03.0
0246:  GOTO   26B
0247:  BTFSC  78.7
0248:  GOTO   250
0249:  RLF    6D,F
024A:  RLF    7A,F
024B:  RLF    79,F
024C:  RLF    78,F
024D:  DECF   77,F
024E:  BTFSC  03.2
024F:  GOTO   26B
0250:  BTFSS  6D.7
0251:  GOTO   261
0252:  INCF   7A,F
0253:  BTFSS  03.2
0254:  GOTO   261
0255:  INCF   79,F
0256:  BTFSS  03.2
0257:  GOTO   261
0258:  INCF   78,F
0259:  BTFSS  03.2
025A:  GOTO   261
025B:  RRF    78,F
025C:  RRF    79,F
025D:  RRF    7A,F
025E:  INCF   77,F
025F:  BTFSC  03.2
0260:  GOTO   26B
0261:  MOVF   62,W
0262:  MOVWF  6A
0263:  MOVF   66,W
0264:  XORWF  6A,F
0265:  BTFSS  6A.7
0266:  GOTO   269
0267:  BSF    78.7
0268:  GOTO   26F
0269:  BCF    78.7
026A:  GOTO   26F
026B:  CLRF   77
026C:  CLRF   78
026D:  CLRF   79
026E:  CLRF   7A
026F:  RETURN
0270:  BTFSC  03.1
0271:  GOTO   275
0272:  MOVLW  69
0273:  MOVWF  04
0274:  BCF    03.7
0275:  CLRF   77
0276:  CLRF   78
0277:  CLRF   79
0278:  CLRF   7A
0279:  CLRF   69
027A:  CLRF   6A
027B:  CLRF   6B
027C:  CLRF   6C
027D:  MOVF   68,W
027E:  IORWF  67,W
027F:  IORWF  66,W
0280:  IORWF  65,W
0281:  BTFSC  03.2
0282:  GOTO   2B3
0283:  MOVLW  20
0284:  MOVWF  6D
0285:  BCF    03.0
0286:  RLF    61,F
0287:  RLF    62,F
0288:  RLF    63,F
0289:  RLF    64,F
028A:  RLF    69,F
028B:  RLF    6A,F
028C:  RLF    6B,F
028D:  RLF    6C,F
028E:  MOVF   68,W
028F:  SUBWF  6C,W
0290:  BTFSS  03.2
0291:  GOTO   29C
0292:  MOVF   67,W
0293:  SUBWF  6B,W
0294:  BTFSS  03.2
0295:  GOTO   29C
0296:  MOVF   66,W
0297:  SUBWF  6A,W
0298:  BTFSS  03.2
0299:  GOTO   29C
029A:  MOVF   65,W
029B:  SUBWF  69,W
029C:  BTFSS  03.0
029D:  GOTO   2AD
029E:  MOVF   65,W
029F:  SUBWF  69,F
02A0:  MOVF   66,W
02A1:  BTFSS  03.0
02A2:  INCFSZ 66,W
02A3:  SUBWF  6A,F
02A4:  MOVF   67,W
02A5:  BTFSS  03.0
02A6:  INCFSZ 67,W
02A7:  SUBWF  6B,F
02A8:  MOVF   68,W
02A9:  BTFSS  03.0
02AA:  INCFSZ 68,W
02AB:  SUBWF  6C,F
02AC:  BSF    03.0
02AD:  RLF    77,F
02AE:  RLF    78,F
02AF:  RLF    79,F
02B0:  RLF    7A,F
02B1:  DECFSZ 6D,F
02B2:  GOTO   285
02B3:  MOVF   69,W
02B4:  MOVWF  00
02B5:  INCF   04,F
02B6:  MOVF   6A,W
02B7:  MOVWF  00
02B8:  INCF   04,F
02B9:  MOVF   6B,W
02BA:  MOVWF  00
02BB:  INCF   04,F
02BC:  MOVF   6C,W
02BD:  MOVWF  00
02BE:  RETURN
02BF:  MOVF   04,W
02C0:  MOVWF  59
02C1:  MOVF   58,W
02C2:  MOVWF  5B
02C3:  BTFSC  03.2
02C4:  GOTO   2DE
02C5:  MOVF   57,W
02C6:  MOVWF  64
02C7:  MOVF   56,W
02C8:  MOVWF  63
02C9:  MOVF   55,W
02CA:  MOVWF  62
02CB:  MOVF   54,W
02CC:  MOVWF  61
02CD:  CLRF   68
02CE:  CLRF   67
02CF:  MOVLW  20
02D0:  MOVWF  66
02D1:  MOVLW  82
02D2:  MOVWF  65
02D3:  CALL   1FB
02D4:  MOVF   7A,W
02D5:  MOVWF  57
02D6:  MOVF   79,W
02D7:  MOVWF  56
02D8:  MOVF   78,W
02D9:  MOVWF  55
02DA:  MOVF   77,W
02DB:  MOVWF  54
02DC:  DECFSZ 5B,F
02DD:  GOTO   2C5
02DE:  MOVF   57,W
02DF:  MOVWF  64
02E0:  MOVF   56,W
02E1:  MOVWF  63
02E2:  MOVF   55,W
02E3:  MOVWF  62
02E4:  MOVF   54,W
02E5:  MOVWF  61
02E6:  MOVF   61,W
02E7:  SUBLW  B6
02E8:  MOVWF  61
02E9:  CLRF   7A
02EA:  MOVF   62,W
02EB:  MOVWF  65
02EC:  BSF    62.7
02ED:  BCF    03.0
02EE:  RRF    62,F
02EF:  RRF    63,F
02F0:  RRF    64,F
02F1:  RRF    7A,F
02F2:  RRF    79,F
02F3:  RRF    78,F
02F4:  RRF    77,F
02F5:  DECFSZ 61,F
02F6:  GOTO   2ED
02F7:  BTFSS  65.7
02F8:  GOTO   304
02F9:  COMF   77,F
02FA:  COMF   78,F
02FB:  COMF   79,F
02FC:  COMF   7A,F
02FD:  INCF   77,F
02FE:  BTFSC  03.2
02FF:  INCF   78,F
0300:  BTFSC  03.2
0301:  INCF   79,F
0302:  BTFSC  03.2
0303:  INCF   7A,F
0304:  MOVF   7A,W
0305:  MOVWF  57
0306:  MOVF   79,W
0307:  MOVWF  56
0308:  MOVF   78,W
0309:  MOVWF  55
030A:  MOVF   77,W
030B:  MOVWF  54
030C:  BTFSS  57.7
030D:  GOTO   31B
030E:  DECF   59,F
030F:  BSF    59.5
0310:  COMF   54,F
0311:  COMF   55,F
0312:  COMF   56,F
0313:  COMF   57,F
0314:  INCF   54,F
0315:  BTFSC  03.2
0316:  INCF   55,F
0317:  BTFSC  03.2
0318:  INCF   56,F
0319:  BTFSC  03.2
031A:  INCF   57,F
031B:  MOVLW  3B
031C:  MOVWF  60
031D:  MOVLW  9A
031E:  MOVWF  5F
031F:  MOVLW  CA
0320:  MOVWF  5E
0321:  CLRF   5D
0322:  MOVLW  0A
0323:  MOVWF  5B
0324:  MOVF   58,W
0325:  BTFSC  03.2
0326:  INCF   59,F
0327:  BSF    03.1
0328:  MOVLW  54
0329:  MOVWF  04
032A:  BCF    03.7
032B:  MOVF   57,W
032C:  MOVWF  64
032D:  MOVF   56,W
032E:  MOVWF  63
032F:  MOVF   55,W
0330:  MOVWF  62
0331:  MOVF   54,W
0332:  MOVWF  61
0333:  MOVF   60,W
0334:  MOVWF  68
0335:  MOVF   5F,W
0336:  MOVWF  67
0337:  MOVF   5E,W
0338:  MOVWF  66
0339:  MOVF   5D,W
033A:  MOVWF  65
033B:  CALL   270
033C:  MOVF   78,W
033D:  MOVF   77,F
033E:  BTFSS  03.2
033F:  GOTO   353
0340:  INCF   58,W
0341:  SUBWF  5B,W
0342:  BTFSC  03.2
0343:  GOTO   353
0344:  MOVF   59,W
0345:  BTFSC  03.2
0346:  GOTO   355
0347:  ANDLW  0F
0348:  SUBWF  5B,W
0349:  BTFSC  03.2
034A:  GOTO   34D
034B:  BTFSC  03.0
034C:  GOTO   389
034D:  BTFSC  59.7
034E:  GOTO   389
034F:  BTFSC  59.6
0350:  GOTO   355
0351:  MOVLW  20
0352:  GOTO   384
0353:  MOVLW  20
0354:  ANDWF  59,F
0355:  BTFSS  59.5
0356:  GOTO   364
0357:  BCF    59.5
0358:  MOVF   58,W
0359:  BTFSS  03.2
035A:  DECF   59,F
035B:  MOVF   77,W
035C:  MOVWF  59
035D:  MOVLW  2D
035E:  BTFSS  0C.4
035F:  GOTO   35E
0360:  MOVWF  19
0361:  MOVF   59,W
0362:  MOVWF  77
0363:  CLRF   59
0364:  MOVF   58,W
0365:  SUBWF  5B,W
0366:  BTFSS  03.2
0367:  GOTO   373
0368:  MOVF   77,W
0369:  MOVWF  59
036A:  MOVLW  2E
036B:  BTFSS  0C.4
036C:  GOTO   36B
036D:  MOVWF  19
036E:  MOVF   59,W
036F:  MOVWF  77
0370:  MOVLW  20
0371:  ANDWF  59,F
0372:  MOVLW  00
0373:  MOVLW  30
0374:  BTFSS  59.5
0375:  GOTO   384
0376:  BCF    59.5
0377:  MOVF   58,W
0378:  BTFSS  03.2
0379:  DECF   59,F
037A:  MOVF   77,W
037B:  MOVWF  59
037C:  MOVLW  2D
037D:  BTFSS  0C.4
037E:  GOTO   37D
037F:  MOVWF  19
0380:  MOVF   59,W
0381:  MOVWF  77
0382:  CLRF   59
0383:  MOVLW  30
0384:  ADDWF  77,F
0385:  MOVF   77,W
0386:  BTFSS  0C.4
0387:  GOTO   386
0388:  MOVWF  19
0389:  BCF    03.1
038A:  MOVF   60,W
038B:  MOVWF  64
038C:  MOVF   5F,W
038D:  MOVWF  63
038E:  MOVF   5E,W
038F:  MOVWF  62
0390:  MOVF   5D,W
0391:  MOVWF  61
0392:  CLRF   68
0393:  CLRF   67
0394:  CLRF   66
0395:  MOVLW  0A
0396:  MOVWF  65
0397:  CALL   270
0398:  MOVF   7A,W
0399:  MOVWF  60
039A:  MOVF   79,W
039B:  MOVWF  5F
039C:  MOVF   78,W
039D:  MOVWF  5E
039E:  MOVF   77,W
039F:  MOVWF  5D
03A0:  DECFSZ 5B,F
03A1:  GOTO   327
03A2:  BCF    0A.3
03A3:  BCF    0A.4
03A4:  GOTO   492 (RETURN)
*
03D1:  MOVLW  8E
03D2:  MOVWF  77
03D3:  MOVF   55,W
03D4:  MOVWF  78
03D5:  MOVF   54,W
03D6:  MOVWF  79
03D7:  CLRF   7A
03D8:  MOVF   78,F
03D9:  BTFSS  03.2
03DA:  GOTO   3E5
03DB:  MOVF   79,W
03DC:  MOVWF  78
03DD:  CLRF   79
03DE:  MOVLW  08
03DF:  SUBWF  77,F
03E0:  MOVF   78,F
03E1:  BTFSS  03.2
03E2:  GOTO   3E5
03E3:  CLRF   77
03E4:  GOTO   3ED
03E5:  BCF    03.0
03E6:  BTFSC  78.7
03E7:  GOTO   3EC
03E8:  RLF    79,F
03E9:  RLF    78,F
03EA:  DECF   77,F
03EB:  GOTO   3E5
03EC:  BCF    78.7
*
042D:  MOVF   0B,W
042E:  MOVWF  55
042F:  BCF    0B.7
0430:  BSF    03.5
0431:  BSF    03.6
0432:  BSF    0C.7
0433:  BSF    0C.0
0434:  NOP
0435:  NOP
0436:  BCF    03.5
0437:  BCF    03.6
0438:  BTFSC  55.7
0439:  BSF    0B.7
043A:  BTFSC  03.0
043B:  GOTO   465
043C:  BSF    03.6
043D:  MOVF   0C,W
043E:  ANDLW  7F
043F:  BCF    03.6
0440:  MOVWF  55
0441:  BSF    03.6
0442:  MOVF   0D,W
0443:  BCF    03.6
0444:  MOVWF  56
0445:  BSF    03.6
0446:  MOVF   0F,W
0447:  BCF    03.6
0448:  MOVWF  57
0449:  MOVF   55,W
044A:  BTFSS  0C.4
044B:  GOTO   44A
044C:  MOVWF  19
044D:  MOVF   56,W
044E:  BSF    03.6
044F:  MOVWF  0D
0450:  BCF    03.6
0451:  MOVF   57,W
0452:  BSF    03.6
0453:  MOVWF  0F
0454:  BCF    03.6
0455:  MOVF   0B,W
0456:  MOVWF  58
0457:  BCF    0B.7
0458:  BSF    03.5
0459:  BSF    03.6
045A:  BSF    0C.7
045B:  BSF    0C.0
045C:  NOP
045D:  NOP
045E:  BCF    03.5
045F:  BCF    03.6
0460:  BTFSC  58.7
0461:  BSF    0B.7
0462:  DECFSZ 54,F
0463:  GOTO   465
0464:  GOTO   485
0465:  BSF    03.6
0466:  RLF    0C,W
0467:  RLF    0E,W
0468:  ANDLW  7F
0469:  BCF    03.6
046A:  MOVWF  55
046B:  BSF    03.6
046C:  MOVF   0D,W
046D:  BCF    03.6
046E:  MOVWF  56
046F:  BSF    03.6
0470:  MOVF   0F,W
0471:  BCF    03.6
0472:  MOVWF  57
0473:  MOVF   55,W
0474:  BTFSS  0C.4
0475:  GOTO   474
0476:  MOVWF  19
0477:  MOVF   56,W
0478:  BSF    03.6
0479:  MOVWF  0D
047A:  BCF    03.6
047B:  MOVF   57,W
047C:  BSF    03.6
047D:  MOVWF  0F
047E:  INCF   0D,F
047F:  BTFSC  03.2
0480:  INCF   0F,F
0481:  BCF    03.0
0482:  BCF    03.6
0483:  DECFSZ 54,F
0484:  GOTO   42D
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=16000000)
*
0015:  MOVLW  58
0016:  MOVWF  04
0017:  BCF    03.7
0018:  MOVF   00,W
0019:  BTFSC  03.2
001A:  GOTO   029
001B:  MOVLW  05
001C:  MOVWF  78
001D:  CLRF   77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  DECFSZ 78,F
0021:  GOTO   01D
0022:  MOVLW  2E
0023:  MOVWF  77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  GOTO   027
0027:  DECFSZ 00,F
0028:  GOTO   01B
0029:  RETURN
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1)
.................... 
.................... 
.................... #define LCD_ENABLE_PIN  PIN_C2                                   
.................... #define LCD_RS_PIN      PIN_C3                                  
.................... #define LCD_RW_PIN      PIN_C1                                   
.................... #define LCD_DATA4       PIN_D0                                
.................... #define LCD_DATA5       PIN_D1                                  
.................... #define LCD_DATA6       PIN_D2                                   
.................... #define LCD_DATA7       PIN_D3
.................... #include <LCD.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
00A2:  BSF    08.0
....................    output_float(LCD_DATA5);
00A3:  BSF    08.1
....................    output_float(LCD_DATA6);
00A4:  BSF    08.2
....................    output_float(LCD_DATA7);
00A5:  BSF    08.3
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00A6:  BCF    03.5
00A7:  BSF    07.1
00A8:  BCF    20.1
00A9:  MOVF   20,W
00AA:  BSF    03.5
00AB:  MOVWF  07
....................    delay_cycles(1);
00AC:  NOP
....................    lcd_output_enable(1);
00AD:  BCF    03.5
00AE:  BSF    07.2
00AF:  BCF    20.2
00B0:  MOVF   20,W
00B1:  BSF    03.5
00B2:  MOVWF  07
....................    delay_cycles(1);
00B3:  NOP
....................    high = lcd_read_nibble();
00B4:  BCF    03.5
00B5:  CALL   05D
00B6:  MOVF   78,W
00B7:  MOVWF  5E
....................       
....................    lcd_output_enable(0);
00B8:  BCF    07.2
00B9:  BCF    20.2
00BA:  MOVF   20,W
00BB:  BSF    03.5
00BC:  MOVWF  07
....................    delay_cycles(1);
00BD:  NOP
....................    lcd_output_enable(1);
00BE:  BCF    03.5
00BF:  BSF    07.2
00C0:  BCF    20.2
00C1:  MOVF   20,W
00C2:  BSF    03.5
00C3:  MOVWF  07
....................    delay_us(1);
00C4:  GOTO   0C5
00C5:  GOTO   0C6
....................    low = lcd_read_nibble();
00C6:  BCF    03.5
00C7:  CALL   05D
00C8:  MOVF   78,W
00C9:  MOVWF  5D
....................       
....................    lcd_output_enable(0);
00CA:  BCF    07.2
00CB:  BCF    20.2
00CC:  MOVF   20,W
00CD:  BSF    03.5
00CE:  MOVWF  07
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00CF:  BCF    08.0
....................    output_drive(LCD_DATA5);
00D0:  BCF    08.1
....................    output_drive(LCD_DATA6);
00D1:  BCF    08.2
....................    output_drive(LCD_DATA7);
00D2:  BCF    08.3
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00D3:  BCF    03.5
00D4:  SWAPF  5E,W
00D5:  MOVWF  77
00D6:  MOVLW  F0
00D7:  ANDWF  77,F
00D8:  MOVF   77,W
00D9:  IORWF  5D,W
00DA:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
005D:  CLRF   5F
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
005E:  BSF    03.5
005F:  BSF    08.0
0060:  MOVLW  00
0061:  BCF    03.5
0062:  BTFSC  08.0
0063:  MOVLW  01
0064:  IORWF  5F,F
....................    n |= input(LCD_DATA5) << 1;
0065:  BSF    03.5
0066:  BSF    08.1
0067:  MOVLW  00
0068:  BCF    03.5
0069:  BTFSC  08.1
006A:  MOVLW  01
006B:  MOVWF  77
006C:  BCF    03.0
006D:  RLF    77,F
006E:  MOVF   77,W
006F:  IORWF  5F,F
....................    n |= input(LCD_DATA6) << 2;
0070:  BSF    03.5
0071:  BSF    08.2
0072:  MOVLW  00
0073:  BCF    03.5
0074:  BTFSC  08.2
0075:  MOVLW  01
0076:  MOVWF  77
0077:  RLF    77,F
0078:  RLF    77,F
0079:  MOVLW  FC
007A:  ANDWF  77,F
007B:  MOVF   77,W
007C:  IORWF  5F,F
....................    n |= input(LCD_DATA7) << 3;
007D:  BSF    03.5
007E:  BSF    08.3
007F:  MOVLW  00
0080:  BCF    03.5
0081:  BTFSC  08.3
0082:  MOVLW  01
0083:  MOVWF  77
0084:  RLF    77,F
0085:  RLF    77,F
0086:  RLF    77,F
0087:  MOVLW  F8
0088:  ANDWF  77,F
0089:  MOVF   77,W
008A:  IORWF  5F,F
....................    
....................    return(n);
008B:  MOVF   5F,W
008C:  MOVWF  78
....................   #else
008D:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
002A:  BTFSC  5E.0
002B:  GOTO   02E
002C:  BCF    08.0
002D:  GOTO   02F
002E:  BSF    08.0
002F:  BSF    03.5
0030:  BCF    08.0
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0031:  BCF    03.5
0032:  BTFSC  5E.1
0033:  GOTO   036
0034:  BCF    08.1
0035:  GOTO   037
0036:  BSF    08.1
0037:  BSF    03.5
0038:  BCF    08.1
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0039:  BCF    03.5
003A:  BTFSC  5E.2
003B:  GOTO   03E
003C:  BCF    08.2
003D:  GOTO   03F
003E:  BSF    08.2
003F:  BSF    03.5
0040:  BCF    08.2
....................    output_bit(LCD_DATA7, bit_test(n, 3));
0041:  BCF    03.5
0042:  BTFSC  5E.3
0043:  GOTO   046
0044:  BCF    08.3
0045:  GOTO   047
0046:  BSF    08.3
0047:  BSF    03.5
0048:  BCF    08.3
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0049:  NOP
....................    lcd_output_enable(1);
004A:  BCF    03.5
004B:  BSF    07.2
004C:  BCF    20.2
004D:  MOVF   20,W
004E:  BSF    03.5
004F:  MOVWF  07
....................    delay_us(2);
0050:  MOVLW  02
0051:  MOVWF  77
0052:  DECFSZ 77,F
0053:  GOTO   052
0054:  NOP
....................    lcd_output_enable(0);
0055:  BCF    03.5
0056:  BCF    07.2
0057:  BCF    20.2
0058:  MOVF   20,W
0059:  BSF    03.5
005A:  MOVWF  07
005B:  BCF    03.5
005C:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
008E:  BCF    20.2
008F:  MOVF   20,W
0090:  BSF    03.5
0091:  MOVWF  07
....................    lcd_rs_tris();
0092:  BCF    03.5
0093:  BCF    20.3
0094:  MOVF   20,W
0095:  BSF    03.5
0096:  MOVWF  07
....................    lcd_rw_tris();
0097:  BCF    03.5
0098:  BCF    20.1
0099:  MOVF   20,W
009A:  BSF    03.5
009B:  MOVWF  07
....................   #endif
.................... 
....................    lcd_output_rs(0);
009C:  BCF    03.5
009D:  BCF    07.3
009E:  BCF    20.3
009F:  MOVF   20,W
00A0:  BSF    03.5
00A1:  MOVWF  07
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00DB:  MOVF   78,W
00DC:  MOVWF  5D
00DD:  BTFSS  5D.7
00DE:  GOTO   0E1
00DF:  BSF    03.5
00E0:  GOTO   0A2
....................    lcd_output_rs(address);
00E1:  MOVF   5B,F
00E2:  BTFSS  03.2
00E3:  GOTO   0E6
00E4:  BCF    07.3
00E5:  GOTO   0E7
00E6:  BSF    07.3
00E7:  BCF    20.3
00E8:  MOVF   20,W
00E9:  BSF    03.5
00EA:  MOVWF  07
....................    delay_cycles(1);
00EB:  NOP
....................    lcd_output_rw(0);
00EC:  BCF    03.5
00ED:  BCF    07.1
00EE:  BCF    20.1
00EF:  MOVF   20,W
00F0:  BSF    03.5
00F1:  MOVWF  07
....................    delay_cycles(1);
00F2:  NOP
....................    lcd_output_enable(0);
00F3:  BCF    03.5
00F4:  BCF    07.2
00F5:  BCF    20.2
00F6:  MOVF   20,W
00F7:  BSF    03.5
00F8:  MOVWF  07
....................    lcd_send_nibble(n >> 4);
00F9:  BCF    03.5
00FA:  SWAPF  5C,W
00FB:  MOVWF  5D
00FC:  MOVLW  0F
00FD:  ANDWF  5D,F
00FE:  MOVF   5D,W
00FF:  MOVWF  5E
0100:  CALL   02A
....................    lcd_send_nibble(n & 0xf);
0101:  MOVF   5C,W
0102:  ANDLW  0F
0103:  MOVWF  5D
0104:  MOVWF  5E
0105:  CALL   02A
0106:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0107:  MOVLW  28
0108:  MOVWF  54
0109:  MOVLW  0C
010A:  MOVWF  55
010B:  MOVLW  01
010C:  MOVWF  56
010D:  MOVLW  06
010E:  MOVWF  57
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
010F:  BCF    07.2
0110:  BCF    20.2
0111:  MOVF   20,W
0112:  BSF    03.5
0113:  MOVWF  07
....................    lcd_output_rs(0);
0114:  BCF    03.5
0115:  BCF    07.3
0116:  BCF    20.3
0117:  MOVF   20,W
0118:  BSF    03.5
0119:  MOVWF  07
....................    lcd_output_rw(0);
011A:  BCF    03.5
011B:  BCF    07.1
011C:  BCF    20.1
011D:  MOVF   20,W
011E:  BSF    03.5
011F:  MOVWF  07
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0120:  BCF    08.0
....................    output_drive(LCD_DATA5);
0121:  BCF    08.1
....................    output_drive(LCD_DATA6);
0122:  BCF    08.2
....................    output_drive(LCD_DATA7);
0123:  BCF    08.3
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0124:  BCF    03.5
0125:  BCF    20.2
0126:  MOVF   20,W
0127:  BSF    03.5
0128:  MOVWF  07
....................    lcd_rs_tris();
0129:  BCF    03.5
012A:  BCF    20.3
012B:  MOVF   20,W
012C:  BSF    03.5
012D:  MOVWF  07
....................    lcd_rw_tris();
012E:  BCF    03.5
012F:  BCF    20.1
0130:  MOVF   20,W
0131:  BSF    03.5
0132:  MOVWF  07
....................  #endif
....................     
....................    delay_ms(15);
0133:  MOVLW  0F
0134:  BCF    03.5
0135:  MOVWF  58
0136:  CALL   015
....................    for(i=1;i<=3;++i)
0137:  MOVLW  01
0138:  MOVWF  53
0139:  MOVF   53,W
013A:  SUBLW  03
013B:  BTFSS  03.0
013C:  GOTO   145
....................    {
....................        lcd_send_nibble(3);
013D:  MOVLW  03
013E:  MOVWF  5E
013F:  CALL   02A
....................        delay_ms(5);
0140:  MOVLW  05
0141:  MOVWF  58
0142:  CALL   015
0143:  INCF   53,F
0144:  GOTO   139
....................    }
....................    
....................    lcd_send_nibble(2);
0145:  MOVLW  02
0146:  MOVWF  5E
0147:  CALL   02A
....................    delay_ms(5);
0148:  MOVLW  05
0149:  MOVWF  58
014A:  CALL   015
....................    for(i=0;i<=3;++i)
014B:  CLRF   53
014C:  MOVF   53,W
014D:  SUBLW  03
014E:  BTFSS  03.0
014F:  GOTO   15C
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0150:  MOVLW  54
0151:  ADDWF  53,W
0152:  MOVWF  04
0153:  BCF    03.7
0154:  MOVF   00,W
0155:  MOVWF  58
0156:  CLRF   5B
0157:  MOVF   58,W
0158:  MOVWF  5C
0159:  CALL   08E
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
015A:  INCF   53,F
015B:  GOTO   14C
015C:  BCF    0A.3
015D:  BCF    0A.4
015E:  GOTO   4CF (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
015F:  DECFSZ 58,W
0160:  GOTO   162
0161:  GOTO   165
....................       address=LCD_LINE_TWO;
0162:  MOVLW  40
0163:  MOVWF  59
0164:  GOTO   166
....................    else
....................       address=0;
0165:  CLRF   59
....................      
....................    address+=x-1;
0166:  MOVLW  01
0167:  SUBWF  57,W
0168:  ADDWF  59,F
....................    lcd_send_byte(0,0x80|address);
0169:  MOVF   59,W
016A:  IORLW  80
016B:  MOVWF  5A
016C:  CLRF   5B
016D:  MOVF   5A,W
016E:  MOVWF  5C
016F:  CALL   08E
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0170:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0171:  MOVF   56,W
0172:  XORLW  07
0173:  BTFSC  03.2
0174:  GOTO   17F
0175:  XORLW  0B
0176:  BTFSC  03.2
0177:  GOTO   184
0178:  XORLW  06
0179:  BTFSC  03.2
017A:  GOTO   18C
017B:  XORLW  02
017C:  BTFSC  03.2
017D:  GOTO   192
017E:  GOTO   197
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
017F:  MOVLW  01
0180:  MOVWF  57
0181:  MOVWF  58
0182:  CALL   15F
0183:  GOTO   19C
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0184:  CLRF   5B
0185:  MOVLW  01
0186:  MOVWF  5C
0187:  CALL   08E
....................                      delay_ms(2);
0188:  MOVLW  02
0189:  MOVWF  58
018A:  CALL   015
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
018B:  GOTO   19C
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
018C:  MOVLW  01
018D:  MOVWF  57
018E:  MOVLW  02
018F:  MOVWF  58
0190:  CALL   15F
0191:  GOTO   19C
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0192:  CLRF   5B
0193:  MOVLW  10
0194:  MOVWF  5C
0195:  CALL   08E
0196:  GOTO   19C
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0197:  MOVLW  01
0198:  MOVWF  5B
0199:  MOVF   56,W
019A:  MOVWF  5C
019B:  CALL   08E
....................      #endif
....................    }
019C:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define LED PIN_E1
.................... #define BUZZER PIN_B1
.................... #define trig1 PIN_B4
.................... #define echo1 PIN_B5
.................... 
.................... #define DELAY 500
.................... 
.................... float mesafe, zaman;
.................... 
.................... 
.................... 
.................... float mesafe_array[10];
.................... 
.................... void blink_led()
.................... {
....................    output_toggle(LED);
*
01F3:  BSF    03.5
01F4:  BCF    09.1
01F5:  MOVLW  02
01F6:  BCF    03.5
01F7:  XORWF  09,F
01F8:  BCF    0A.3
01F9:  BCF    0A.4
01FA:  GOTO   4E7 (RETURN)
.................... }
.................... 
.................... void read_hcsr04()
.................... {
....................    setup_timer_1(t1_internal | t1_div_by_1);
*
03A5:  MOVLW  05
03A6:  MOVWF  10
....................     for(int i =  0; i < 10; i++)
03A7:  CLRF   53
03A8:  MOVF   53,W
03A9:  SUBLW  09
03AA:  BTFSS  03.0
03AB:  GOTO   424
....................     {
....................            output_high(trig1);
03AC:  BSF    03.5
03AD:  BCF    06.4
03AE:  BCF    03.5
03AF:  BSF    06.4
....................        delay_ms(10);
03B0:  MOVLW  0A
03B1:  MOVWF  58
03B2:  CALL   015
....................        output_low(trig1);
03B3:  BSF    03.5
03B4:  BCF    06.4
03B5:  BCF    03.5
03B6:  BCF    06.4
....................       
....................        while(!input(echo1))
03B7:  BSF    03.5
03B8:  BSF    06.5
03B9:  BCF    03.5
03BA:  BTFSS  06.5
....................        { }
03BB:  GOTO   3B7
....................        
....................        set_timer1(0);
03BC:  CLRF   0E
03BD:  CLRF   0F
03BE:  CLRF   0E
03BF:  NOP
....................        
....................        while(input(echo1))
03C0:  BSF    03.5
03C1:  BSF    06.5
03C2:  BCF    03.5
03C3:  BTFSC  06.5
....................        { }
03C4:  GOTO   3C0
....................        
....................        zaman = get_timer1();
03C5:  MOVF   0F,W
03C6:  MOVWF  7A
03C7:  MOVF   0E,W
03C8:  MOVWF  77
03C9:  MOVF   0F,W
03CA:  SUBWF  7A,W
03CB:  BTFSS  03.2
03CC:  GOTO   3C5
03CD:  MOVF   77,W
03CE:  MOVWF  54
03CF:  MOVF   7A,W
03D0:  MOVWF  55
*
03ED:  MOVF   7A,W
03EE:  MOVWF  28
03EF:  MOVF   79,W
03F0:  MOVWF  27
03F1:  MOVF   78,W
03F2:  MOVWF  26
03F3:  MOVF   77,W
03F4:  MOVWF  25
....................        
....................        mesafe = zaman * 0.0037;
03F5:  MOVF   28,W
03F6:  MOVWF  64
03F7:  MOVF   27,W
03F8:  MOVWF  63
03F9:  MOVF   26,W
03FA:  MOVWF  62
03FB:  MOVF   25,W
03FC:  MOVWF  61
03FD:  MOVLW  B3
03FE:  MOVWF  68
03FF:  MOVLW  7B
0400:  MOVWF  67
0401:  MOVLW  72
0402:  MOVWF  66
0403:  MOVLW  76
0404:  MOVWF  65
0405:  CALL   1FB
0406:  MOVF   7A,W
0407:  MOVWF  24
0408:  MOVF   79,W
0409:  MOVWF  23
040A:  MOVF   78,W
040B:  MOVWF  22
040C:  MOVF   77,W
040D:  MOVWF  21
....................        mesafe_array[i] = mesafe;
040E:  RLF    53,W
040F:  MOVWF  77
0410:  RLF    77,F
0411:  MOVLW  FC
0412:  ANDWF  77,F
0413:  MOVF   77,W
0414:  ADDLW  29
0415:  MOVWF  04
0416:  BCF    03.7
0417:  MOVF   21,W
0418:  MOVWF  00
0419:  INCF   04,F
041A:  MOVF   22,W
041B:  MOVWF  00
041C:  INCF   04,F
041D:  MOVF   23,W
041E:  MOVWF  00
041F:  INCF   04,F
0420:  MOVF   24,W
0421:  MOVWF  00
0422:  INCF   53,F
0423:  GOTO   3A8
....................        
....................       
....................     }
....................      
....................    printf("mesafe = %f\r\n", mesafe);
0424:  MOVLW  04
0425:  BSF    03.6
0426:  MOVWF  0D
0427:  MOVLW  00
0428:  MOVWF  0F
0429:  BCF    03.0
042A:  MOVLW  09
042B:  BCF    03.6
042C:  MOVWF  54
*
0485:  MOVLW  89
0486:  MOVWF  04
0487:  MOVF   24,W
0488:  MOVWF  57
0489:  MOVF   23,W
048A:  MOVWF  56
048B:  MOVF   22,W
048C:  MOVWF  55
048D:  MOVF   21,W
048E:  MOVWF  54
048F:  MOVLW  02
0490:  MOVWF  58
0491:  GOTO   2BF
0492:  MOVLW  0D
0493:  BTFSS  0C.4
0494:  GOTO   493
0495:  MOVWF  19
0496:  MOVLW  0A
0497:  BTFSS  0C.4
0498:  GOTO   497
0499:  MOVWF  19
049A:  BCF    0A.3
049B:  BCF    0A.4
049C:  GOTO   4E8 (RETURN)
.................... }
.................... 
.................... 
.................... void main()
049D:  MOVF   03,W
049E:  ANDLW  1F
049F:  MOVWF  03
04A0:  BSF    03.5
04A1:  BSF    03.6
04A2:  BSF    07.3
04A3:  MOVLW  A0
04A4:  BCF    03.6
04A5:  MOVWF  19
04A6:  MOVLW  01
04A7:  MOVWF  1A
04A8:  MOVLW  A6
04A9:  MOVWF  18
04AA:  MOVLW  90
04AB:  BCF    03.5
04AC:  MOVWF  18
04AD:  MOVLW  FF
04AE:  MOVWF  20
04AF:  CLRF   52
04B0:  CLRF   51
04B1:  BSF    03.5
04B2:  BSF    03.6
04B3:  MOVF   09,W
04B4:  ANDLW  C0
04B5:  MOVWF  09
04B6:  BCF    03.6
04B7:  BCF    1F.4
04B8:  BCF    1F.5
04B9:  MOVLW  00
04BA:  BSF    03.6
04BB:  MOVWF  08
04BC:  BCF    03.5
04BD:  CLRF   07
04BE:  CLRF   08
04BF:  CLRF   09
04C0:  BCF    03.7
.................... {
.................... 
....................    output_b(0xFF);
04C1:  BSF    03.5
04C2:  BCF    03.6
04C3:  CLRF   06
04C4:  MOVLW  FF
04C5:  BCF    03.5
04C6:  MOVWF  06
....................    set_tris_b(0xFF);
04C7:  BSF    03.5
04C8:  MOVWF  06
....................    set_tris_d(0x00);
04C9:  MOVLW  00
04CA:  MOVWF  08
....................    output_d(0x00);
04CB:  CLRF   08
04CC:  BCF    03.5
04CD:  CLRF   08
....................    
....................    lcd_init();
04CE:  GOTO   107
....................     lcd_gotoxy(1,1); printf(lcd_putc,"Selcuk Fuckin");
04CF:  MOVLW  01
04D0:  MOVWF  57
04D1:  MOVWF  58
04D2:  CALL   15F
04D3:  MOVLW  0B
04D4:  BSF    03.6
04D5:  MOVWF  0D
04D6:  MOVLW  00
04D7:  MOVWF  0F
04D8:  BCF    03.6
04D9:  CALL   19D
....................     lcd_gotoxy(1,2); printf(lcd_putc,"KIZIR");
04DA:  MOVLW  01
04DB:  MOVWF  57
04DC:  MOVLW  02
04DD:  MOVWF  58
04DE:  CALL   15F
04DF:  MOVLW  12
04E0:  BSF    03.6
04E1:  MOVWF  0D
04E2:  MOVLW  00
04E3:  MOVWF  0F
04E4:  BCF    03.6
04E5:  CALL   19D
....................     
....................   
....................    while(TRUE)
....................    {
....................       blink_led();
04E6:  GOTO   1F3
....................       read_hcsr04();
04E7:  GOTO   3A5
....................         
....................       delay_ms(200);
04E8:  MOVLW  C8
04E9:  MOVWF  58
04EA:  CALL   015
04EB:  GOTO   4E6
....................     
....................    }
.................... 
.................... }
04EC:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
