CCS PCM C Compiler, Version 5.112, 5967               04-Oca-24 08:24

               Filename:   C:\Users\Muratcan\OneDrive\Masaüstü\TESTER\main.lst

               ROM used:   5127 words (63%)
                           Largest free fragment is 2048
               RAM used:   115 (31%) at main() level
                           226 (61%) worst case
               Stack used: 6 locations (2 in main + 4 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0D
0001:  MOVWF  0A
0002:  GOTO   54D
0003:  NOP
.................... #define LCD_RS_PIN     PIN_D0
.................... #define LCD_RW_PIN     PIN_D1
.................... #define LCD_ENABLE_PIN PIN_D2
.................... #define LCD_DATA4      PIN_D3
.................... #define LCD_DATA5      PIN_D4
.................... #define LCD_DATA6      PIN_D5
.................... #define LCD_DATA7      PIN_D6
.................... 
.................... #include <16F887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  A0
0009:  RETLW  00
000A:  RETLW  A7
000B:  RETLW  00
000C:  RETLW  AE
000D:  RETLW  00
*
0023:  MOVLW  8E
0024:  MOVWF  77
0025:  BSF    03.6
0026:  MOVF   35,W
0027:  MOVWF  78
0028:  MOVF   34,W
0029:  MOVWF  79
002A:  CLRF   7A
002B:  MOVF   78,F
002C:  BTFSS  03.2
002D:  GOTO   038
002E:  MOVF   79,W
002F:  MOVWF  78
0030:  CLRF   79
0031:  MOVLW  08
0032:  SUBWF  77,F
0033:  MOVF   78,F
0034:  BTFSS  03.2
0035:  GOTO   038
0036:  CLRF   77
0037:  GOTO   040
0038:  BCF    03.0
0039:  BTFSC  78.7
003A:  GOTO   03F
003B:  RLF    79,F
003C:  RLF    78,F
003D:  DECF   77,F
003E:  GOTO   038
003F:  BCF    78.7
0040:  BCF    03.6
0041:  RETURN
0042:  BSF    03.6
0043:  MOVF   30,W
0044:  BTFSC  03.2
0045:  GOTO   0B3
0046:  MOVWF  38
0047:  MOVF   34,W
0048:  BTFSC  03.2
0049:  GOTO   0B3
004A:  ADDWF  38,F
004B:  BTFSC  03.0
004C:  GOTO   054
004D:  MOVLW  7F
004E:  SUBWF  38,F
004F:  BTFSS  03.0
0050:  GOTO   0B3
0051:  BTFSC  03.2
0052:  GOTO   0B3
0053:  GOTO   058
0054:  MOVLW  81
0055:  ADDWF  38,F
0056:  BTFSC  03.0
0057:  GOTO   0B3
0058:  MOVF   38,W
0059:  MOVWF  77
005A:  CLRF   78
005B:  CLRF   79
005C:  CLRF   7A
005D:  MOVF   31,W
005E:  MOVWF  3C
005F:  BSF    3C.7
0060:  MOVF   32,W
0061:  MOVWF  3B
0062:  MOVF   33,W
0063:  MOVWF  3A
0064:  MOVLW  18
0065:  MOVWF  38
0066:  CLRF   39
0067:  BTFSS  3A.0
0068:  GOTO   081
0069:  MOVF   37,W
006A:  ADDWF  7A,F
006B:  BTFSS  03.0
006C:  GOTO   073
006D:  INCF   79,F
006E:  BTFSS  03.2
006F:  GOTO   073
0070:  INCF   78,F
0071:  BTFSC  03.2
0072:  BSF    39.7
0073:  MOVF   36,W
0074:  ADDWF  79,F
0075:  BTFSS  03.0
0076:  GOTO   07A
0077:  INCF   78,F
0078:  BTFSC  03.2
0079:  BSF    39.7
007A:  MOVF   35,W
007B:  MOVWF  32
007C:  BSF    32.7
007D:  MOVF   32,W
007E:  ADDWF  78,F
007F:  BTFSC  03.0
0080:  BSF    39.7
0081:  RLF    39,F
0082:  RRF    78,F
0083:  RRF    79,F
0084:  RRF    7A,F
0085:  RRF    3C,F
0086:  RRF    3B,F
0087:  RRF    3A,F
0088:  BCF    03.0
0089:  DECFSZ 38,F
008A:  GOTO   066
008B:  MOVLW  01
008C:  ADDWF  77,F
008D:  BTFSC  03.0
008E:  GOTO   0B3
008F:  BTFSC  78.7
0090:  GOTO   098
0091:  RLF    3C,F
0092:  RLF    7A,F
0093:  RLF    79,F
0094:  RLF    78,F
0095:  DECF   77,F
0096:  BTFSC  03.2
0097:  GOTO   0B3
0098:  BTFSS  3C.7
0099:  GOTO   0A9
009A:  INCF   7A,F
009B:  BTFSS  03.2
009C:  GOTO   0A9
009D:  INCF   79,F
009E:  BTFSS  03.2
009F:  GOTO   0A9
00A0:  INCF   78,F
00A1:  BTFSS  03.2
00A2:  GOTO   0A9
00A3:  RRF    78,F
00A4:  RRF    79,F
00A5:  RRF    7A,F
00A6:  INCF   77,F
00A7:  BTFSC  03.2
00A8:  GOTO   0B3
00A9:  MOVF   31,W
00AA:  MOVWF  39
00AB:  MOVF   35,W
00AC:  XORWF  39,F
00AD:  BTFSS  39.7
00AE:  GOTO   0B1
00AF:  BSF    78.7
00B0:  GOTO   0B7
00B1:  BCF    78.7
00B2:  GOTO   0B7
00B3:  CLRF   77
00B4:  CLRF   78
00B5:  CLRF   79
00B6:  CLRF   7A
00B7:  BCF    03.6
00B8:  RETURN
*
01D7:  BSF    03.6
01D8:  MOVF   30,W
01D9:  BTFSC  03.2
01DA:  GOTO   29D
01DB:  MOVWF  3C
01DC:  MOVF   34,W
01DD:  BTFSC  03.2
01DE:  GOTO   29D
01DF:  SUBWF  3C,F
01E0:  BTFSS  03.0
01E1:  GOTO   1E7
01E2:  MOVLW  7F
01E3:  ADDWF  3C,F
01E4:  BTFSC  03.0
01E5:  GOTO   29D
01E6:  GOTO   1ED
01E7:  MOVLW  81
01E8:  SUBWF  3C,F
01E9:  BTFSS  03.0
01EA:  GOTO   29D
01EB:  BTFSC  03.2
01EC:  GOTO   29D
01ED:  MOVF   3C,W
01EE:  MOVWF  77
01EF:  CLRF   78
01F0:  CLRF   79
01F1:  CLRF   7A
01F2:  CLRF   3B
01F3:  MOVF   31,W
01F4:  MOVWF  3A
01F5:  BSF    3A.7
01F6:  MOVF   32,W
01F7:  MOVWF  39
01F8:  MOVF   33,W
01F9:  MOVWF  38
01FA:  MOVLW  19
01FB:  MOVWF  3C
01FC:  MOVF   37,W
01FD:  SUBWF  38,F
01FE:  BTFSC  03.0
01FF:  GOTO   210
0200:  MOVLW  01
0201:  SUBWF  39,F
0202:  BTFSC  03.0
0203:  GOTO   210
0204:  SUBWF  3A,F
0205:  BTFSC  03.0
0206:  GOTO   210
0207:  SUBWF  3B,F
0208:  BTFSC  03.0
0209:  GOTO   210
020A:  INCF   3B,F
020B:  INCF   3A,F
020C:  INCF   39,F
020D:  MOVF   37,W
020E:  ADDWF  38,F
020F:  GOTO   242
0210:  MOVF   36,W
0211:  SUBWF  39,F
0212:  BTFSC  03.0
0213:  GOTO   22B
0214:  MOVLW  01
0215:  SUBWF  3A,F
0216:  BTFSC  03.0
0217:  GOTO   22B
0218:  SUBWF  3B,F
0219:  BTFSC  03.0
021A:  GOTO   22B
021B:  INCF   3B,F
021C:  INCF   3A,F
021D:  MOVF   36,W
021E:  ADDWF  39,F
021F:  MOVF   37,W
0220:  ADDWF  38,F
0221:  BTFSS  03.0
0222:  GOTO   242
0223:  INCF   39,F
0224:  BTFSS  03.2
0225:  GOTO   242
0226:  INCF   3A,F
0227:  BTFSS  03.2
0228:  GOTO   242
0229:  INCF   3B,F
022A:  GOTO   242
022B:  MOVF   35,W
022C:  IORLW  80
022D:  SUBWF  3A,F
022E:  BTFSC  03.0
022F:  GOTO   241
0230:  MOVLW  01
0231:  SUBWF  3B,F
0232:  BTFSC  03.0
0233:  GOTO   241
0234:  INCF   3B,F
0235:  MOVF   35,W
0236:  IORLW  80
0237:  ADDWF  3A,F
0238:  MOVF   36,W
0239:  ADDWF  39,F
023A:  BTFSS  03.0
023B:  GOTO   21F
023C:  INCF   3A,F
023D:  BTFSS  03.2
023E:  GOTO   21F
023F:  INCF   3B,F
0240:  GOTO   21F
0241:  BSF    7A.0
0242:  DECFSZ 3C,F
0243:  GOTO   245
0244:  GOTO   250
0245:  BCF    03.0
0246:  RLF    38,F
0247:  RLF    39,F
0248:  RLF    3A,F
0249:  RLF    3B,F
024A:  BCF    03.0
024B:  RLF    7A,F
024C:  RLF    79,F
024D:  RLF    78,F
024E:  RLF    3D,F
024F:  GOTO   1FC
0250:  BTFSS  3D.0
0251:  GOTO   258
0252:  BCF    03.0
0253:  RRF    78,F
0254:  RRF    79,F
0255:  RRF    7A,F
0256:  RRF    3D,F
0257:  GOTO   25B
0258:  DECF   77,F
0259:  BTFSC  03.2
025A:  GOTO   29D
025B:  BTFSC  3D.7
025C:  GOTO   284
025D:  BCF    03.0
025E:  RLF    38,F
025F:  RLF    39,F
0260:  RLF    3A,F
0261:  RLF    3B,F
0262:  MOVF   37,W
0263:  SUBWF  38,F
0264:  BTFSC  03.0
0265:  GOTO   270
0266:  MOVLW  01
0267:  SUBWF  39,F
0268:  BTFSC  03.0
0269:  GOTO   270
026A:  SUBWF  3A,F
026B:  BTFSC  03.0
026C:  GOTO   270
026D:  SUBWF  3B,F
026E:  BTFSS  03.0
026F:  GOTO   293
0270:  MOVF   36,W
0271:  SUBWF  39,F
0272:  BTFSC  03.0
0273:  GOTO   27B
0274:  MOVLW  01
0275:  SUBWF  3A,F
0276:  BTFSC  03.0
0277:  GOTO   27B
0278:  SUBWF  3B,F
0279:  BTFSS  03.0
027A:  GOTO   293
027B:  MOVF   35,W
027C:  IORLW  80
027D:  SUBWF  3A,F
027E:  BTFSC  03.0
027F:  GOTO   284
0280:  MOVLW  01
0281:  SUBWF  3B,F
0282:  BTFSS  03.0
0283:  GOTO   293
0284:  INCF   7A,F
0285:  BTFSS  03.2
0286:  GOTO   293
0287:  INCF   79,F
0288:  BTFSS  03.2
0289:  GOTO   293
028A:  INCF   78,F
028B:  BTFSS  03.2
028C:  GOTO   293
028D:  INCF   77,F
028E:  BTFSC  03.2
028F:  GOTO   29D
0290:  RRF    78,F
0291:  RRF    79,F
0292:  RRF    7A,F
0293:  MOVF   31,W
0294:  MOVWF  3C
0295:  MOVF   35,W
0296:  XORWF  3C,F
0297:  BTFSS  3C.7
0298:  GOTO   29B
0299:  BSF    78.7
029A:  GOTO   2A1
029B:  BCF    78.7
029C:  GOTO   2A1
029D:  CLRF   77
029E:  CLRF   78
029F:  CLRF   79
02A0:  CLRF   7A
02A1:  BCF    03.6
02A2:  RETURN
*
0423:  BSF    03.6
0424:  MOVF   1D,W
0425:  SUBLW  B6
0426:  MOVWF  1D
0427:  CLRF   7A
0428:  MOVF   1E,W
0429:  MOVWF  21
042A:  BSF    1E.7
042B:  BCF    03.0
042C:  RRF    1E,F
042D:  RRF    1F,F
042E:  RRF    20,F
042F:  RRF    7A,F
0430:  RRF    79,F
0431:  RRF    78,F
0432:  RRF    77,F
0433:  DECFSZ 1D,F
0434:  GOTO   42B
0435:  BTFSS  21.7
0436:  GOTO   442
0437:  COMF   77,F
0438:  COMF   78,F
0439:  COMF   79,F
043A:  COMF   7A,F
043B:  INCF   77,F
043C:  BTFSC  03.2
043D:  INCF   78,F
043E:  BTFSC  03.2
043F:  INCF   79,F
0440:  BTFSC  03.2
0441:  INCF   7A,F
0442:  BCF    03.6
0443:  RETURN
0444:  BTFSC  03.1
0445:  GOTO   449
0446:  MOVLW  25
0447:  MOVWF  04
0448:  BSF    03.7
0449:  CLRF   77
044A:  CLRF   78
044B:  CLRF   79
044C:  CLRF   7A
044D:  BSF    03.6
044E:  CLRF   25
044F:  CLRF   26
0450:  CLRF   27
0451:  CLRF   28
0452:  MOVF   24,W
0453:  IORWF  23,W
0454:  IORWF  22,W
0455:  IORWF  21,W
0456:  BTFSC  03.2
0457:  GOTO   488
0458:  MOVLW  20
0459:  MOVWF  29
045A:  BCF    03.0
045B:  RLF    1D,F
045C:  RLF    1E,F
045D:  RLF    1F,F
045E:  RLF    20,F
045F:  RLF    25,F
0460:  RLF    26,F
0461:  RLF    27,F
0462:  RLF    28,F
0463:  MOVF   24,W
0464:  SUBWF  28,W
0465:  BTFSS  03.2
0466:  GOTO   471
0467:  MOVF   23,W
0468:  SUBWF  27,W
0469:  BTFSS  03.2
046A:  GOTO   471
046B:  MOVF   22,W
046C:  SUBWF  26,W
046D:  BTFSS  03.2
046E:  GOTO   471
046F:  MOVF   21,W
0470:  SUBWF  25,W
0471:  BTFSS  03.0
0472:  GOTO   482
0473:  MOVF   21,W
0474:  SUBWF  25,F
0475:  MOVF   22,W
0476:  BTFSS  03.0
0477:  INCFSZ 22,W
0478:  SUBWF  26,F
0479:  MOVF   23,W
047A:  BTFSS  03.0
047B:  INCFSZ 23,W
047C:  SUBWF  27,F
047D:  MOVF   24,W
047E:  BTFSS  03.0
047F:  INCFSZ 24,W
0480:  SUBWF  28,F
0481:  BSF    03.0
0482:  RLF    77,F
0483:  RLF    78,F
0484:  RLF    79,F
0485:  RLF    7A,F
0486:  DECFSZ 29,F
0487:  GOTO   45A
0488:  MOVF   25,W
0489:  MOVWF  00
048A:  INCF   04,F
048B:  MOVF   26,W
048C:  MOVWF  00
048D:  INCF   04,F
048E:  MOVF   27,W
048F:  MOVWF  00
0490:  INCF   04,F
0491:  MOVF   28,W
0492:  MOVWF  00
0493:  BCF    03.6
0494:  RETURN
0495:  MOVF   04,W
0496:  BSF    03.5
0497:  MOVWF  5A
0498:  MOVF   59,W
0499:  MOVWF  5C
049A:  BTFSC  03.2
049B:  GOTO   4C5
049C:  MOVF   58,W
049D:  BCF    03.5
049E:  BSF    03.6
049F:  MOVWF  33
04A0:  BSF    03.5
04A1:  BCF    03.6
04A2:  MOVF   57,W
04A3:  BCF    03.5
04A4:  BSF    03.6
04A5:  MOVWF  32
04A6:  BSF    03.5
04A7:  BCF    03.6
04A8:  MOVF   56,W
04A9:  BCF    03.5
04AA:  BSF    03.6
04AB:  MOVWF  31
04AC:  BSF    03.5
04AD:  BCF    03.6
04AE:  MOVF   55,W
04AF:  BCF    03.5
04B0:  BSF    03.6
04B1:  MOVWF  30
04B2:  CLRF   37
04B3:  CLRF   36
04B4:  MOVLW  20
04B5:  MOVWF  35
04B6:  MOVLW  82
04B7:  MOVWF  34
04B8:  BCF    03.6
04B9:  CALL   042
04BA:  MOVF   7A,W
04BB:  BSF    03.5
04BC:  MOVWF  58
04BD:  MOVF   79,W
04BE:  MOVWF  57
04BF:  MOVF   78,W
04C0:  MOVWF  56
04C1:  MOVF   77,W
04C2:  MOVWF  55
04C3:  DECFSZ 5C,F
04C4:  GOTO   49C
04C5:  MOVF   58,W
04C6:  BCF    03.5
04C7:  BSF    03.6
04C8:  MOVWF  20
04C9:  BSF    03.5
04CA:  BCF    03.6
04CB:  MOVF   57,W
04CC:  BCF    03.5
04CD:  BSF    03.6
04CE:  MOVWF  1F
04CF:  BSF    03.5
04D0:  BCF    03.6
04D1:  MOVF   56,W
04D2:  BCF    03.5
04D3:  BSF    03.6
04D4:  MOVWF  1E
04D5:  BSF    03.5
04D6:  BCF    03.6
04D7:  MOVF   55,W
04D8:  BCF    03.5
04D9:  BSF    03.6
04DA:  MOVWF  1D
04DB:  BCF    03.6
04DC:  CALL   423
04DD:  MOVF   7A,W
04DE:  BSF    03.5
04DF:  MOVWF  58
04E0:  MOVF   79,W
04E1:  MOVWF  57
04E2:  MOVF   78,W
04E3:  MOVWF  56
04E4:  MOVF   77,W
04E5:  MOVWF  55
04E6:  BTFSS  58.7
04E7:  GOTO   4F5
04E8:  DECF   5A,F
04E9:  BSF    5A.5
04EA:  COMF   55,F
04EB:  COMF   56,F
04EC:  COMF   57,F
04ED:  COMF   58,F
04EE:  INCF   55,F
04EF:  BTFSC  03.2
04F0:  INCF   56,F
04F1:  BTFSC  03.2
04F2:  INCF   57,F
04F3:  BTFSC  03.2
04F4:  INCF   58,F
04F5:  MOVLW  3B
04F6:  MOVWF  61
04F7:  MOVLW  9A
04F8:  MOVWF  60
04F9:  MOVLW  CA
04FA:  MOVWF  5F
04FB:  CLRF   5E
04FC:  MOVLW  0A
04FD:  MOVWF  5C
04FE:  MOVF   59,W
04FF:  BTFSC  03.2
0500:  INCF   5A,F
0501:  BSF    03.1
0502:  MOVLW  D5
0503:  MOVWF  04
0504:  BCF    03.7
0505:  MOVF   58,W
0506:  BCF    03.5
0507:  BSF    03.6
0508:  MOVWF  20
0509:  BSF    03.5
050A:  BCF    03.6
050B:  MOVF   57,W
050C:  BCF    03.5
050D:  BSF    03.6
050E:  MOVWF  1F
050F:  BSF    03.5
0510:  BCF    03.6
0511:  MOVF   56,W
0512:  BCF    03.5
0513:  BSF    03.6
0514:  MOVWF  1E
0515:  BSF    03.5
0516:  BCF    03.6
0517:  MOVF   55,W
0518:  BCF    03.5
0519:  BSF    03.6
051A:  MOVWF  1D
051B:  BSF    03.5
051C:  BCF    03.6
051D:  MOVF   61,W
051E:  BCF    03.5
051F:  BSF    03.6
0520:  MOVWF  24
0521:  BSF    03.5
0522:  BCF    03.6
0523:  MOVF   60,W
0524:  BCF    03.5
0525:  BSF    03.6
0526:  MOVWF  23
0527:  BSF    03.5
0528:  BCF    03.6
0529:  MOVF   5F,W
052A:  BCF    03.5
052B:  BSF    03.6
052C:  MOVWF  22
052D:  BSF    03.5
052E:  BCF    03.6
052F:  MOVF   5E,W
0530:  BCF    03.5
0531:  BSF    03.6
0532:  MOVWF  21
0533:  BCF    03.6
0534:  CALL   444
0535:  MOVF   78,W
0536:  MOVF   77,F
0537:  BTFSS  03.2
0538:  GOTO   550
0539:  BSF    03.5
053A:  INCF   59,W
053B:  SUBWF  5C,W
053C:  BTFSS  03.2
053D:  GOTO   540
053E:  BCF    03.5
053F:  GOTO   550
0540:  MOVF   5A,W
0541:  BTFSC  03.2
0542:  GOTO   553
0543:  ANDLW  0F
0544:  SUBWF  5C,W
0545:  BTFSC  03.2
0546:  GOTO   549
0547:  BTFSC  03.0
0548:  GOTO   58B
0549:  BTFSC  5A.7
054A:  GOTO   58B
054B:  BTFSC  5A.6
054C:  GOTO   553
054D:  MOVLW  20
054E:  GOTO   585
054F:  BCF    03.5
0550:  MOVLW  20
0551:  BSF    03.5
0552:  ANDWF  5A,F
0553:  BTFSS  5A.5
0554:  GOTO   563
0555:  BCF    5A.5
0556:  MOVF   59,W
0557:  BTFSS  03.2
0558:  DECF   5A,F
0559:  MOVF   77,W
055A:  MOVWF  5A
055B:  MOVLW  2D
055C:  MOVWF  62
055D:  BCF    03.5
055E:  CALL   3C9
055F:  BSF    03.5
0560:  MOVF   5A,W
0561:  MOVWF  77
0562:  CLRF   5A
0563:  MOVF   59,W
0564:  SUBWF  5C,W
0565:  BTFSS  03.2
0566:  GOTO   573
0567:  MOVF   77,W
0568:  MOVWF  5A
0569:  MOVLW  2E
056A:  MOVWF  62
056B:  BCF    03.5
056C:  CALL   3C9
056D:  BSF    03.5
056E:  MOVF   5A,W
056F:  MOVWF  77
0570:  MOVLW  20
0571:  ANDWF  5A,F
0572:  MOVLW  00
0573:  MOVLW  30
0574:  BTFSS  5A.5
0575:  GOTO   585
0576:  BCF    5A.5
0577:  MOVF   59,W
0578:  BTFSS  03.2
0579:  DECF   5A,F
057A:  MOVF   77,W
057B:  MOVWF  5A
057C:  MOVLW  2D
057D:  MOVWF  62
057E:  BCF    03.5
057F:  CALL   3C9
0580:  BSF    03.5
0581:  MOVF   5A,W
0582:  MOVWF  77
0583:  CLRF   5A
0584:  MOVLW  30
0585:  ADDWF  77,F
0586:  MOVF   77,W
0587:  MOVWF  62
0588:  BCF    03.5
0589:  CALL   3C9
058A:  BSF    03.5
058B:  BCF    03.1
058C:  MOVF   61,W
058D:  BCF    03.5
058E:  BSF    03.6
058F:  MOVWF  20
0590:  BSF    03.5
0591:  BCF    03.6
0592:  MOVF   60,W
0593:  BCF    03.5
0594:  BSF    03.6
0595:  MOVWF  1F
0596:  BSF    03.5
0597:  BCF    03.6
0598:  MOVF   5F,W
0599:  BCF    03.5
059A:  BSF    03.6
059B:  MOVWF  1E
059C:  BSF    03.5
059D:  BCF    03.6
059E:  MOVF   5E,W
059F:  BCF    03.5
05A0:  BSF    03.6
05A1:  MOVWF  1D
05A2:  CLRF   24
05A3:  CLRF   23
05A4:  CLRF   22
05A5:  MOVLW  0A
05A6:  MOVWF  21
05A7:  BCF    03.6
05A8:  CALL   444
05A9:  MOVF   7A,W
05AA:  BSF    03.5
05AB:  MOVWF  61
05AC:  MOVF   79,W
05AD:  MOVWF  60
05AE:  MOVF   78,W
05AF:  MOVWF  5F
05B0:  MOVF   77,W
05B1:  MOVWF  5E
05B2:  DECFSZ 5C,F
05B3:  GOTO   501
05B4:  BCF    03.5
05B5:  RETURN
*
07C5:  MOVLW  8E
07C6:  MOVWF  77
07C7:  BSF    03.6
07C8:  MOVF   30,W
07C9:  SUBWF  77,F
07CA:  MOVF   31,W
07CB:  MOVWF  79
07CC:  MOVF   32,W
07CD:  MOVWF  78
07CE:  BSF    79.7
07CF:  MOVF   77,F
07D0:  BTFSC  03.2
07D1:  GOTO   7DD
07D2:  BCF    03.0
07D3:  MOVF   79,F
07D4:  BTFSS  03.2
07D5:  GOTO   7D9
07D6:  MOVF   78,F
07D7:  BTFSC  03.2
07D8:  GOTO   7DD
07D9:  RRF    79,F
07DA:  RRF    78,F
07DB:  DECFSZ 77,F
07DC:  GOTO   7D2
07DD:  BTFSS  31.7
07DE:  GOTO   7E4
07DF:  COMF   78,F
07E0:  COMF   79,F
07E1:  INCF   78,F
07E2:  BTFSC  03.2
07E3:  INCF   79,F
07E4:  BCF    03.6
07E5:  RETURN
*
07F7:  DATA 0C,29
07F8:  DATA E5,30
07F9:  DATA E4,3C
07FA:  DATA 2E,17
07FB:  DATA 2E,05
07FC:  DATA 00,00
*
0800:  MOVF   04,W
0801:  BSF    03.6
0802:  MOVWF  14
0803:  BSF    03.5
0804:  BCF    03.6
0805:  MOVF   6F,W
0806:  BCF    03.5
0807:  BSF    03.6
0808:  MOVWF  16
0809:  BTFSC  03.2
080A:  GOTO   028
080B:  MOVF   13,W
080C:  MOVWF  33
080D:  MOVF   12,W
080E:  MOVWF  32
080F:  MOVF   11,W
0810:  MOVWF  31
0811:  MOVF   10,W
0812:  MOVWF  30
0813:  CLRF   37
0814:  CLRF   36
0815:  MOVLW  20
0816:  MOVWF  35
0817:  MOVLW  82
0818:  MOVWF  34
0819:  BCF    0A.3
081A:  BCF    03.6
081B:  CALL   042
081C:  BSF    0A.3
081D:  MOVF   7A,W
081E:  BSF    03.6
081F:  MOVWF  13
0820:  MOVF   79,W
0821:  MOVWF  12
0822:  MOVF   78,W
0823:  MOVWF  11
0824:  MOVF   77,W
0825:  MOVWF  10
0826:  DECFSZ 16,F
0827:  GOTO   00B
0828:  MOVF   13,W
0829:  MOVWF  20
082A:  MOVF   12,W
082B:  MOVWF  1F
082C:  MOVF   11,W
082D:  MOVWF  1E
082E:  MOVF   10,W
082F:  MOVWF  1D
0830:  BCF    0A.3
0831:  BCF    03.6
0832:  CALL   423
0833:  BSF    0A.3
0834:  MOVF   7A,W
0835:  BSF    03.6
0836:  MOVWF  13
0837:  MOVF   79,W
0838:  MOVWF  12
0839:  MOVF   78,W
083A:  MOVWF  11
083B:  MOVF   77,W
083C:  MOVWF  10
083D:  BTFSS  13.7
083E:  GOTO   04C
083F:  DECF   14,F
0840:  BSF    14.5
0841:  COMF   10,F
0842:  COMF   11,F
0843:  COMF   12,F
0844:  COMF   13,F
0845:  INCF   10,F
0846:  BTFSC  03.2
0847:  INCF   11,F
0848:  BTFSC  03.2
0849:  INCF   12,F
084A:  BTFSC  03.2
084B:  INCF   13,F
084C:  MOVLW  3B
084D:  MOVWF  1B
084E:  MOVLW  9A
084F:  MOVWF  1A
0850:  MOVLW  CA
0851:  MOVWF  19
0852:  CLRF   18
0853:  MOVLW  0A
0854:  MOVWF  16
0855:  BSF    03.5
0856:  BCF    03.6
0857:  MOVF   6F,W
0858:  BTFSS  03.2
0859:  GOTO   05F
085A:  BCF    03.5
085B:  BSF    03.6
085C:  INCF   14,F
085D:  BSF    03.5
085E:  BCF    03.6
085F:  BSF    03.1
0860:  MOVLW  10
0861:  MOVWF  04
0862:  BSF    03.7
0863:  BCF    03.5
0864:  BSF    03.6
0865:  MOVF   13,W
0866:  MOVWF  20
0867:  MOVF   12,W
0868:  MOVWF  1F
0869:  MOVF   11,W
086A:  MOVWF  1E
086B:  MOVF   10,W
086C:  MOVWF  1D
086D:  MOVF   1B,W
086E:  MOVWF  24
086F:  MOVF   1A,W
0870:  MOVWF  23
0871:  MOVF   19,W
0872:  MOVWF  22
0873:  MOVF   18,W
0874:  MOVWF  21
0875:  BCF    0A.3
0876:  BCF    03.6
0877:  CALL   444
0878:  BSF    0A.3
0879:  MOVF   78,W
087A:  MOVF   77,F
087B:  BTFSS  03.2
087C:  GOTO   096
087D:  BSF    03.5
087E:  INCF   6F,W
087F:  BCF    03.5
0880:  BSF    03.6
0881:  SUBWF  16,W
0882:  BTFSS  03.2
0883:  GOTO   086
0884:  BCF    03.6
0885:  GOTO   096
0886:  MOVF   14,W
0887:  BTFSC  03.2
0888:  GOTO   099
0889:  ANDLW  0F
088A:  SUBWF  16,W
088B:  BTFSC  03.2
088C:  GOTO   08F
088D:  BTFSC  03.0
088E:  GOTO   0EB
088F:  BTFSC  14.7
0890:  GOTO   0EB
0891:  BTFSC  14.6
0892:  GOTO   099
0893:  MOVLW  20
0894:  GOTO   0E4
0895:  BCF    03.6
0896:  MOVLW  20
0897:  BSF    03.6
0898:  ANDWF  14,F
0899:  BTFSS  14.5
089A:  GOTO   0B3
089B:  BCF    14.5
089C:  BSF    03.5
089D:  BCF    03.6
089E:  MOVF   6F,W
089F:  BTFSC  03.2
08A0:  GOTO   0A6
08A1:  BCF    03.5
08A2:  BSF    03.6
08A3:  DECF   14,F
08A4:  BSF    03.5
08A5:  BCF    03.6
08A6:  MOVF   77,W
08A7:  BCF    03.5
08A8:  BSF    03.6
08A9:  MOVWF  14
08AA:  MOVLW  2D
08AB:  BCF    03.6
08AC:  BTFSS  0C.4
08AD:  GOTO   0AC
08AE:  MOVWF  19
08AF:  BSF    03.6
08B0:  MOVF   14,W
08B1:  MOVWF  77
08B2:  CLRF   14
08B3:  BSF    03.5
08B4:  BCF    03.6
08B5:  MOVF   6F,W
08B6:  BCF    03.5
08B7:  BSF    03.6
08B8:  SUBWF  16,W
08B9:  BTFSS  03.2
08BA:  GOTO   0C8
08BB:  MOVF   77,W
08BC:  MOVWF  14
08BD:  MOVLW  2E
08BE:  BCF    03.6
08BF:  BTFSS  0C.4
08C0:  GOTO   0BF
08C1:  MOVWF  19
08C2:  BSF    03.6
08C3:  MOVF   14,W
08C4:  MOVWF  77
08C5:  MOVLW  20
08C6:  ANDWF  14,F
08C7:  MOVLW  00
08C8:  MOVLW  30
08C9:  BTFSS  14.5
08CA:  GOTO   0E4
08CB:  BCF    14.5
08CC:  BSF    03.5
08CD:  BCF    03.6
08CE:  MOVF   6F,W
08CF:  BTFSC  03.2
08D0:  GOTO   0D6
08D1:  BCF    03.5
08D2:  BSF    03.6
08D3:  DECF   14,F
08D4:  BSF    03.5
08D5:  BCF    03.6
08D6:  MOVF   77,W
08D7:  BCF    03.5
08D8:  BSF    03.6
08D9:  MOVWF  14
08DA:  MOVLW  2D
08DB:  BCF    03.6
08DC:  BTFSS  0C.4
08DD:  GOTO   0DC
08DE:  MOVWF  19
08DF:  BSF    03.6
08E0:  MOVF   14,W
08E1:  MOVWF  77
08E2:  CLRF   14
08E3:  MOVLW  30
08E4:  ADDWF  77,F
08E5:  MOVF   77,W
08E6:  BCF    03.6
08E7:  BTFSS  0C.4
08E8:  GOTO   0E7
08E9:  MOVWF  19
08EA:  BSF    03.6
08EB:  BCF    03.1
08EC:  MOVF   1B,W
08ED:  MOVWF  20
08EE:  MOVF   1A,W
08EF:  MOVWF  1F
08F0:  MOVF   19,W
08F1:  MOVWF  1E
08F2:  MOVF   18,W
08F3:  MOVWF  1D
08F4:  CLRF   24
08F5:  CLRF   23
08F6:  CLRF   22
08F7:  MOVLW  0A
08F8:  MOVWF  21
08F9:  BCF    0A.3
08FA:  BCF    03.6
08FB:  CALL   444
08FC:  BSF    0A.3
08FD:  MOVF   7A,W
08FE:  BSF    03.6
08FF:  MOVWF  1B
0900:  MOVF   79,W
0901:  MOVWF  1A
0902:  MOVF   78,W
0903:  MOVWF  19
0904:  MOVF   77,W
0905:  MOVWF  18
0906:  DECFSZ 16,F
0907:  GOTO   109
0908:  GOTO   10C
0909:  BSF    03.5
090A:  BCF    03.6
090B:  GOTO   05F
090C:  BCF    03.6
090D:  RETURN
090E:  MOVLW  80
090F:  BTFSS  03.1
0910:  GOTO   114
0911:  BSF    03.6
0912:  XORWF  39,F
0913:  BCF    03.6
0914:  BSF    03.6
0915:  CLRF   3E
0916:  CLRF   3F
0917:  MOVF   35,W
0918:  MOVWF  3D
0919:  MOVF   39,W
091A:  XORWF  3D,F
091B:  MOVF   34,W
091C:  BTFSC  03.2
091D:  GOTO   202
091E:  MOVWF  3C
091F:  MOVWF  77
0920:  MOVF   38,W
0921:  BTFSC  03.2
0922:  GOTO   20B
0923:  SUBWF  3C,F
0924:  BTFSC  03.2
0925:  GOTO   1A7
0926:  BTFSS  03.0
0927:  GOTO   165
0928:  MOVF   39,W
0929:  MOVWF  42
092A:  BSF    42.7
092B:  MOVF   3A,W
092C:  MOVWF  41
092D:  MOVF   3B,W
092E:  MOVWF  40
092F:  CLRF   3F
0930:  BCF    03.0
0931:  RRF    42,F
0932:  RRF    41,F
0933:  RRF    40,F
0934:  RRF    3F,F
0935:  DECFSZ 3C,F
0936:  GOTO   12F
0937:  BTFSS  3D.7
0938:  GOTO   13C
0939:  BSF    3E.0
093A:  GOTO   21F
093B:  BCF    3E.0
093C:  BCF    3C.0
093D:  BSF    3E.4
093E:  MOVLW  37
093F:  MOVWF  04
0940:  BSF    03.7
0941:  GOTO   234
0942:  BCF    3E.4
0943:  BTFSC  3D.7
0944:  GOTO   14F
0945:  BTFSS  3C.0
0946:  GOTO   15A
0947:  RRF    42,F
0948:  RRF    41,F
0949:  RRF    40,F
094A:  RRF    3F,F
094B:  INCF   77,F
094C:  BTFSC  03.2
094D:  GOTO   21A
094E:  GOTO   15A
094F:  BTFSC  42.7
0950:  GOTO   15D
0951:  BCF    03.0
0952:  RLF    3F,F
0953:  RLF    40,F
0954:  RLF    41,F
0955:  RLF    42,F
0956:  DECF   77,F
0957:  BTFSC  03.2
0958:  GOTO   21A
0959:  GOTO   14F
095A:  BSF    3E.6
095B:  GOTO   1C7
095C:  BCF    3E.6
095D:  MOVF   35,W
095E:  MOVWF  3D
095F:  BTFSS  3D.7
0960:  GOTO   163
0961:  BSF    42.7
0962:  GOTO   213
0963:  BCF    42.7
0964:  GOTO   213
0965:  MOVF   38,W
0966:  MOVWF  3C
0967:  MOVWF  77
0968:  MOVF   34,W
0969:  SUBWF  3C,F
096A:  MOVF   35,W
096B:  MOVWF  42
096C:  BSF    42.7
096D:  MOVF   36,W
096E:  MOVWF  41
096F:  MOVF   37,W
0970:  MOVWF  40
0971:  CLRF   3F
0972:  BCF    03.0
0973:  RRF    42,F
0974:  RRF    41,F
0975:  RRF    40,F
0976:  RRF    3F,F
0977:  DECFSZ 3C,F
0978:  GOTO   171
0979:  BTFSS  3D.7
097A:  GOTO   17E
097B:  BSF    3E.1
097C:  GOTO   21F
097D:  BCF    3E.1
097E:  BCF    3C.0
097F:  BSF    3E.5
0980:  MOVLW  3B
0981:  MOVWF  04
0982:  BSF    03.7
0983:  GOTO   234
0984:  BCF    3E.5
0985:  BTFSC  3D.7
0986:  GOTO   191
0987:  BTFSS  3C.0
0988:  GOTO   19C
0989:  RRF    42,F
098A:  RRF    41,F
098B:  RRF    40,F
098C:  RRF    3F,F
098D:  INCF   77,F
098E:  BTFSC  03.2
098F:  GOTO   21A
0990:  GOTO   19C
0991:  BTFSC  42.7
0992:  GOTO   19F
0993:  BCF    03.0
0994:  RLF    3F,F
0995:  RLF    40,F
0996:  RLF    41,F
0997:  RLF    42,F
0998:  DECF   77,F
0999:  BTFSC  03.2
099A:  GOTO   21A
099B:  GOTO   191
099C:  BSF    3E.7
099D:  GOTO   1C7
099E:  BCF    3E.7
099F:  MOVF   39,W
09A0:  MOVWF  3D
09A1:  BTFSS  3D.7
09A2:  GOTO   1A5
09A3:  BSF    42.7
09A4:  GOTO   213
09A5:  BCF    42.7
09A6:  GOTO   213
09A7:  MOVF   39,W
09A8:  MOVWF  42
09A9:  BSF    42.7
09AA:  MOVF   3A,W
09AB:  MOVWF  41
09AC:  MOVF   3B,W
09AD:  MOVWF  40
09AE:  BTFSS  3D.7
09AF:  GOTO   1B4
09B0:  BCF    42.7
09B1:  BSF    3E.2
09B2:  GOTO   21F
09B3:  BCF    3E.2
09B4:  CLRF   3F
09B5:  BCF    3C.0
09B6:  MOVLW  37
09B7:  MOVWF  04
09B8:  BSF    03.7
09B9:  GOTO   234
09BA:  BTFSC  3D.7
09BB:  GOTO   1DD
09BC:  MOVF   35,W
09BD:  MOVWF  3D
09BE:  BTFSS  3C.0
09BF:  GOTO   1C7
09C0:  RRF    42,F
09C1:  RRF    41,F
09C2:  RRF    40,F
09C3:  RRF    3F,F
09C4:  INCF   77,F
09C5:  BTFSC  03.2
09C6:  GOTO   21A
09C7:  BTFSS  3F.7
09C8:  GOTO   1D8
09C9:  INCF   40,F
09CA:  BTFSS  03.2
09CB:  GOTO   1D8
09CC:  INCF   41,F
09CD:  BTFSS  03.2
09CE:  GOTO   1D8
09CF:  INCF   42,F
09D0:  BTFSS  03.2
09D1:  GOTO   1D8
09D2:  RRF    42,F
09D3:  RRF    41,F
09D4:  RRF    40,F
09D5:  INCF   77,F
09D6:  BTFSC  03.2
09D7:  GOTO   21A
09D8:  BTFSC  3E.6
09D9:  GOTO   15C
09DA:  BTFSC  3E.7
09DB:  GOTO   19E
09DC:  GOTO   1FC
09DD:  MOVLW  80
09DE:  XORWF  42,F
09DF:  BTFSS  42.7
09E0:  GOTO   1E5
09E1:  GOTO   21F
09E2:  MOVF   39,W
09E3:  MOVWF  3D
09E4:  GOTO   1F2
09E5:  MOVF   35,W
09E6:  MOVWF  3D
09E7:  MOVF   42,F
09E8:  BTFSS  03.2
09E9:  GOTO   1F2
09EA:  MOVF   41,F
09EB:  BTFSS  03.2
09EC:  GOTO   1F2
09ED:  MOVF   40,F
09EE:  BTFSS  03.2
09EF:  GOTO   1F2
09F0:  CLRF   77
09F1:  GOTO   213
09F2:  BTFSC  42.7
09F3:  GOTO   1FC
09F4:  BCF    03.0
09F5:  RLF    3F,F
09F6:  RLF    40,F
09F7:  RLF    41,F
09F8:  RLF    42,F
09F9:  DECFSZ 77,F
09FA:  GOTO   1F2
09FB:  GOTO   21A
09FC:  BTFSS  3D.7
09FD:  GOTO   200
09FE:  BSF    42.7
09FF:  GOTO   213
0A00:  BCF    42.7
0A01:  GOTO   213
0A02:  MOVF   38,W
0A03:  MOVWF  77
0A04:  MOVF   39,W
0A05:  MOVWF  42
0A06:  MOVF   3A,W
0A07:  MOVWF  41
0A08:  MOVF   3B,W
0A09:  MOVWF  40
0A0A:  GOTO   213
0A0B:  MOVF   34,W
0A0C:  MOVWF  77
0A0D:  MOVF   35,W
0A0E:  MOVWF  42
0A0F:  MOVF   36,W
0A10:  MOVWF  41
0A11:  MOVF   37,W
0A12:  MOVWF  40
0A13:  MOVF   42,W
0A14:  MOVWF  78
0A15:  MOVF   41,W
0A16:  MOVWF  79
0A17:  MOVF   40,W
0A18:  MOVWF  7A
0A19:  GOTO   252
0A1A:  CLRF   77
0A1B:  CLRF   78
0A1C:  CLRF   79
0A1D:  CLRF   7A
0A1E:  GOTO   252
0A1F:  CLRF   3F
0A20:  COMF   40,F
0A21:  COMF   41,F
0A22:  COMF   42,F
0A23:  COMF   3F,F
0A24:  INCF   3F,F
0A25:  BTFSS  03.2
0A26:  GOTO   22D
0A27:  INCF   40,F
0A28:  BTFSS  03.2
0A29:  GOTO   22D
0A2A:  INCF   41,F
0A2B:  BTFSC  03.2
0A2C:  INCF   42,F
0A2D:  BTFSC  3E.0
0A2E:  GOTO   13B
0A2F:  BTFSC  3E.1
0A30:  GOTO   17D
0A31:  BTFSC  3E.2
0A32:  GOTO   1B3
0A33:  GOTO   1E2
0A34:  MOVF   00,W
0A35:  ADDWF  40,F
0A36:  BTFSS  03.0
0A37:  GOTO   23E
0A38:  INCF   41,F
0A39:  BTFSS  03.2
0A3A:  GOTO   23E
0A3B:  INCF   42,F
0A3C:  BTFSC  03.2
0A3D:  BSF    3C.0
0A3E:  DECF   04,F
0A3F:  MOVF   00,W
0A40:  ADDWF  41,F
0A41:  BTFSS  03.0
0A42:  GOTO   246
0A43:  INCF   42,F
0A44:  BTFSC  03.2
0A45:  BSF    3C.0
0A46:  DECF   04,F
0A47:  MOVF   00,W
0A48:  BTFSS  00.7
0A49:  XORLW  80
0A4A:  ADDWF  42,F
0A4B:  BTFSC  03.0
0A4C:  BSF    3C.0
0A4D:  BTFSC  3E.4
0A4E:  GOTO   142
0A4F:  BTFSC  3E.5
0A50:  GOTO   184
0A51:  GOTO   1BA
0A52:  BCF    03.6
0A53:  RETURN
0A54:  BSF    03.6
0A55:  MOVF   31,W
0A56:  MOVWF  38
0A57:  MOVF   35,W
0A58:  XORWF  38,F
0A59:  BTFSS  38.7
0A5A:  GOTO   260
0A5B:  BCF    03.2
0A5C:  BCF    03.0
0A5D:  BTFSC  31.7
0A5E:  BSF    03.0
0A5F:  GOTO   293
0A60:  MOVF   31,W
0A61:  MOVWF  38
0A62:  MOVF   34,W
0A63:  MOVWF  39
0A64:  MOVF   30,W
0A65:  SUBWF  39,F
0A66:  BTFSC  03.2
0A67:  GOTO   26E
0A68:  BTFSS  38.7
0A69:  GOTO   293
0A6A:  MOVF   03,W
0A6B:  XORLW  01
0A6C:  MOVWF  03
0A6D:  GOTO   293
0A6E:  MOVF   35,W
0A6F:  MOVWF  39
0A70:  MOVF   31,W
0A71:  SUBWF  39,F
0A72:  BTFSC  03.2
0A73:  GOTO   27A
0A74:  BTFSS  38.7
0A75:  GOTO   293
0A76:  MOVF   03,W
0A77:  XORLW  01
0A78:  MOVWF  03
0A79:  GOTO   293
0A7A:  MOVF   36,W
0A7B:  MOVWF  39
0A7C:  MOVF   32,W
0A7D:  SUBWF  39,F
0A7E:  BTFSC  03.2
0A7F:  GOTO   286
0A80:  BTFSS  38.7
0A81:  GOTO   293
0A82:  MOVF   03,W
0A83:  XORLW  01
0A84:  MOVWF  03
0A85:  GOTO   293
0A86:  MOVF   37,W
0A87:  MOVWF  39
0A88:  MOVF   33,W
0A89:  SUBWF  39,F
0A8A:  BTFSC  03.2
0A8B:  GOTO   292
0A8C:  BTFSS  38.7
0A8D:  GOTO   293
0A8E:  MOVF   03,W
0A8F:  XORLW  01
0A90:  MOVWF  03
0A91:  GOTO   293
0A92:  BCF    03.0
0A93:  BCF    03.6
0A94:  RETURN
*
0C84:  DATA 0C,21
0C85:  DATA 41,26
0C86:  DATA 4C,10
0C87:  DATA 2D,10
0C88:  DATA C2,22
0C89:  DATA C1,26
0C8A:  DATA 20,00
*
0DC3:  BCF    03.6
0DC4:  MOVF   0B,W
0DC5:  BSF    03.5
0DC6:  MOVWF  35
0DC7:  BCF    03.5
0DC8:  BCF    0B.7
0DC9:  BSF    03.5
0DCA:  BSF    03.6
0DCB:  BSF    0C.7
0DCC:  BSF    0C.0
0DCD:  NOP
0DCE:  NOP
0DCF:  BCF    03.6
0DD0:  BTFSS  35.7
0DD1:  GOTO   5D5
0DD2:  BCF    03.5
0DD3:  BSF    0B.7
0DD4:  BSF    03.5
0DD5:  BCF    03.5
0DD6:  BSF    03.6
0DD7:  MOVF   0C,W
0DD8:  ANDLW  7F
0DD9:  BTFSC  03.2
0DDA:  GOTO   638
0DDB:  BSF    03.5
0DDC:  BCF    03.6
0DDD:  MOVWF  35
0DDE:  BCF    03.5
0DDF:  BSF    03.6
0DE0:  MOVF   0D,W
0DE1:  BSF    03.5
0DE2:  BCF    03.6
0DE3:  MOVWF  36
0DE4:  BCF    03.5
0DE5:  BSF    03.6
0DE6:  MOVF   0F,W
0DE7:  BSF    03.5
0DE8:  BCF    03.6
0DE9:  MOVWF  37
0DEA:  MOVF   35,W
0DEB:  MOVWF  62
0DEC:  BCF    0A.3
0DED:  BCF    03.5
0DEE:  CALL   3C9
0DEF:  BSF    0A.3
0DF0:  BSF    03.5
0DF1:  MOVF   36,W
0DF2:  BCF    03.5
0DF3:  BSF    03.6
0DF4:  MOVWF  0D
0DF5:  BSF    03.5
0DF6:  BCF    03.6
0DF7:  MOVF   37,W
0DF8:  BCF    03.5
0DF9:  BSF    03.6
0DFA:  MOVWF  0F
0DFB:  BCF    03.6
0DFC:  MOVF   0B,W
0DFD:  BSF    03.5
0DFE:  MOVWF  38
0DFF:  BCF    03.5
0E00:  BCF    0B.7
0E01:  BSF    03.5
0E02:  BSF    03.6
0E03:  BSF    0C.7
0E04:  BSF    0C.0
0E05:  NOP
0E06:  NOP
0E07:  BCF    03.6
0E08:  BTFSS  38.7
0E09:  GOTO   60D
0E0A:  BCF    03.5
0E0B:  BSF    0B.7
0E0C:  BSF    03.5
0E0D:  BCF    03.5
0E0E:  BSF    03.6
0E0F:  RLF    0C,W
0E10:  RLF    0E,W
0E11:  ANDLW  7F
0E12:  BTFSC  03.2
0E13:  GOTO   638
0E14:  BSF    03.5
0E15:  BCF    03.6
0E16:  MOVWF  35
0E17:  BCF    03.5
0E18:  BSF    03.6
0E19:  MOVF   0D,W
0E1A:  BSF    03.5
0E1B:  BCF    03.6
0E1C:  MOVWF  36
0E1D:  BCF    03.5
0E1E:  BSF    03.6
0E1F:  MOVF   0F,W
0E20:  BSF    03.5
0E21:  BCF    03.6
0E22:  MOVWF  37
0E23:  MOVF   35,W
0E24:  MOVWF  62
0E25:  BCF    0A.3
0E26:  BCF    03.5
0E27:  CALL   3C9
0E28:  BSF    0A.3
0E29:  BSF    03.5
0E2A:  MOVF   36,W
0E2B:  BCF    03.5
0E2C:  BSF    03.6
0E2D:  MOVWF  0D
0E2E:  BSF    03.5
0E2F:  BCF    03.6
0E30:  MOVF   37,W
0E31:  BCF    03.5
0E32:  BSF    03.6
0E33:  MOVWF  0F
0E34:  INCF   0D,F
0E35:  BTFSC  03.2
0E36:  INCF   0F,F
0E37:  GOTO   5C3
*
0E44:  BCF    03.6
0E45:  MOVF   0B,W
0E46:  BSF    03.5
0E47:  MOVWF  35
0E48:  BCF    03.5
0E49:  BCF    0B.7
0E4A:  BSF    03.5
0E4B:  BSF    03.6
0E4C:  BSF    0C.7
0E4D:  BSF    0C.0
0E4E:  NOP
0E4F:  NOP
0E50:  BCF    03.6
0E51:  BTFSS  35.7
0E52:  GOTO   656
0E53:  BCF    03.5
0E54:  BSF    0B.7
0E55:  BSF    03.5
0E56:  BCF    03.5
0E57:  BSF    03.6
0E58:  MOVF   0C,W
0E59:  ANDLW  7F
0E5A:  BTFSC  03.2
0E5B:  GOTO   6B9
0E5C:  BSF    03.5
0E5D:  BCF    03.6
0E5E:  MOVWF  35
0E5F:  BCF    03.5
0E60:  BSF    03.6
0E61:  MOVF   0D,W
0E62:  BSF    03.5
0E63:  BCF    03.6
0E64:  MOVWF  36
0E65:  BCF    03.5
0E66:  BSF    03.6
0E67:  MOVF   0F,W
0E68:  BSF    03.5
0E69:  BCF    03.6
0E6A:  MOVWF  37
0E6B:  MOVF   35,W
0E6C:  MOVWF  62
0E6D:  BCF    0A.3
0E6E:  BCF    03.5
0E6F:  CALL   3C9
0E70:  BSF    0A.3
0E71:  BSF    03.5
0E72:  MOVF   36,W
0E73:  BCF    03.5
0E74:  BSF    03.6
0E75:  MOVWF  0D
0E76:  BSF    03.5
0E77:  BCF    03.6
0E78:  MOVF   37,W
0E79:  BCF    03.5
0E7A:  BSF    03.6
0E7B:  MOVWF  0F
0E7C:  BCF    03.6
0E7D:  MOVF   0B,W
0E7E:  BSF    03.5
0E7F:  MOVWF  38
0E80:  BCF    03.5
0E81:  BCF    0B.7
0E82:  BSF    03.5
0E83:  BSF    03.6
0E84:  BSF    0C.7
0E85:  BSF    0C.0
0E86:  NOP
0E87:  NOP
0E88:  BCF    03.6
0E89:  BTFSS  38.7
0E8A:  GOTO   68E
0E8B:  BCF    03.5
0E8C:  BSF    0B.7
0E8D:  BSF    03.5
0E8E:  BCF    03.5
0E8F:  BSF    03.6
0E90:  RLF    0C,W
0E91:  RLF    0E,W
0E92:  ANDLW  7F
0E93:  BTFSC  03.2
0E94:  GOTO   6B9
0E95:  BSF    03.5
0E96:  BCF    03.6
0E97:  MOVWF  35
0E98:  BCF    03.5
0E99:  BSF    03.6
0E9A:  MOVF   0D,W
0E9B:  BSF    03.5
0E9C:  BCF    03.6
0E9D:  MOVWF  36
0E9E:  BCF    03.5
0E9F:  BSF    03.6
0EA0:  MOVF   0F,W
0EA1:  BSF    03.5
0EA2:  BCF    03.6
0EA3:  MOVWF  37
0EA4:  MOVF   35,W
0EA5:  MOVWF  62
0EA6:  BCF    0A.3
0EA7:  BCF    03.5
0EA8:  CALL   3C9
0EA9:  BSF    0A.3
0EAA:  BSF    03.5
0EAB:  MOVF   36,W
0EAC:  BCF    03.5
0EAD:  BSF    03.6
0EAE:  MOVWF  0D
0EAF:  BSF    03.5
0EB0:  BCF    03.6
0EB1:  MOVF   37,W
0EB2:  BCF    03.5
0EB3:  BSF    03.6
0EB4:  MOVWF  0F
0EB5:  INCF   0D,F
0EB6:  BTFSC  03.2
0EB7:  INCF   0F,F
0EB8:  GOTO   644
*
143D:  MOVLW  10
143E:  MOVWF  21
143F:  CLRF   77
1440:  CLRF   7A
1441:  RRF    1E,F
1442:  RRF    1D,F
1443:  BTFSS  03.0
1444:  GOTO   44B
1445:  MOVF   1F,W
1446:  ADDWF  77,F
1447:  BTFSC  03.0
1448:  INCF   7A,F
1449:  MOVF   20,W
144A:  ADDWF  7A,F
144B:  RRF    7A,F
144C:  RRF    77,F
144D:  RRF    79,F
144E:  RRF    78,F
144F:  DECFSZ 21,F
1450:  GOTO   441
.................... 
.................... #list
.................... 
.................... #device adc = 10
.................... #use delay(clock = 16000000)
*
000E:  MOVLW  E3
000F:  MOVWF  04
0010:  BCF    03.7
0011:  MOVF   00,W
0012:  BTFSC  03.2
0013:  GOTO   022
0014:  MOVLW  05
0015:  MOVWF  78
0016:  CLRF   77
0017:  DECFSZ 77,F
0018:  GOTO   017
0019:  DECFSZ 78,F
001A:  GOTO   016
001B:  MOVLW  2E
001C:  MOVWF  77
001D:  DECFSZ 77,F
001E:  GOTO   01D
001F:  GOTO   020
0020:  DECFSZ 00,F
0021:  GOTO   014
0022:  RETURN
*
07E6:  MOVLW  03
07E7:  BSF    03.6
07E8:  SUBWF  20,F
07E9:  BTFSS  03.0
07EA:  GOTO   7F5
07EB:  MOVLW  20
07EC:  MOVWF  04
07ED:  BSF    03.7
07EE:  MOVF   00,W
07EF:  BTFSC  03.2
07F0:  GOTO   7F5
07F1:  GOTO   7F3
07F2:  NOP
07F3:  DECFSZ 00,F
07F4:  GOTO   7F2
07F5:  BCF    03.6
07F6:  RETURN
.................... #fuses HS, WDT, NOLVP
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
.................... 
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
*
0AA0:  BCF    2F.0
....................    y = x;
0AA1:  MOVF   23,W
0AA2:  MOVWF  28
0AA3:  MOVF   22,W
0AA4:  MOVWF  27
0AA5:  MOVF   21,W
0AA6:  MOVWF  26
0AA7:  MOVF   20,W
0AA8:  MOVWF  25
.................... 
....................    if (x < 0)
0AA9:  MOVF   23,W
0AAA:  MOVWF  33
0AAB:  MOVF   22,W
0AAC:  MOVWF  32
0AAD:  MOVF   21,W
0AAE:  MOVWF  31
0AAF:  MOVF   20,W
0AB0:  MOVWF  30
0AB1:  CLRF   37
0AB2:  CLRF   36
0AB3:  CLRF   35
0AB4:  CLRF   34
0AB5:  BCF    03.6
0AB6:  CALL   254
0AB7:  BTFSS  03.0
0AB8:  GOTO   2BF
....................    {
....................       s = 1;
0AB9:  BSF    03.6
0ABA:  BSF    2F.0
....................       y = -y;
0ABB:  MOVF   26,W
0ABC:  XORLW  80
0ABD:  MOVWF  26
0ABE:  BCF    03.6
....................    }
.................... 
....................    if (y <= 32768.0)
0ABF:  BSF    03.6
0AC0:  MOVF   28,W
0AC1:  MOVWF  33
0AC2:  MOVF   27,W
0AC3:  MOVWF  32
0AC4:  MOVF   26,W
0AC5:  MOVWF  31
0AC6:  MOVF   25,W
0AC7:  MOVWF  30
0AC8:  CLRF   37
0AC9:  CLRF   36
0ACA:  CLRF   35
0ACB:  MOVLW  8E
0ACC:  MOVWF  34
0ACD:  BCF    03.6
0ACE:  CALL   254
0ACF:  BTFSC  03.0
0AD0:  GOTO   2D3
0AD1:  BTFSS  03.2
0AD2:  GOTO   2F4
....................       res = (float32)(unsigned int16)y;
0AD3:  BSF    03.6
0AD4:  MOVF   28,W
0AD5:  MOVWF  33
0AD6:  MOVF   27,W
0AD7:  MOVWF  32
0AD8:  MOVF   26,W
0AD9:  MOVWF  31
0ADA:  MOVF   25,W
0ADB:  MOVWF  30
0ADC:  BCF    0A.3
0ADD:  BCF    03.6
0ADE:  CALL   7C5
0ADF:  BSF    0A.3
0AE0:  MOVF   79,W
0AE1:  BSF    03.6
0AE2:  MOVWF  35
0AE3:  MOVF   78,W
0AE4:  MOVWF  34
0AE5:  BCF    0A.3
0AE6:  BCF    03.6
0AE7:  CALL   023
0AE8:  BSF    0A.3
0AE9:  MOVF   7A,W
0AEA:  BSF    03.6
0AEB:  MOVWF  2C
0AEC:  MOVF   79,W
0AED:  MOVWF  2B
0AEE:  MOVF   78,W
0AEF:  MOVWF  2A
0AF0:  MOVF   77,W
0AF1:  MOVWF  29
0AF2:  GOTO   3DE
0AF3:  BCF    03.6
.................... 
....................  else if (y < 10000000.0)
0AF4:  BSF    03.6
0AF5:  MOVF   28,W
0AF6:  MOVWF  33
0AF7:  MOVF   27,W
0AF8:  MOVWF  32
0AF9:  MOVF   26,W
0AFA:  MOVWF  31
0AFB:  MOVF   25,W
0AFC:  MOVWF  30
0AFD:  MOVLW  80
0AFE:  MOVWF  37
0AFF:  MOVLW  96
0B00:  MOVWF  36
0B01:  MOVLW  18
0B02:  MOVWF  35
0B03:  MOVLW  96
0B04:  MOVWF  34
0B05:  BCF    03.6
0B06:  CALL   254
0B07:  BTFSS  03.0
0B08:  GOTO   3D5
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
0B09:  BSF    03.6
0B0A:  MOVF   28,W
0B0B:  MOVWF  33
0B0C:  MOVF   27,W
0B0D:  MOVWF  32
0B0E:  MOVF   26,W
0B0F:  MOVWF  31
0B10:  MOVF   25,W
0B11:  MOVWF  30
0B12:  CLRF   37
0B13:  CLRF   36
0B14:  CLRF   35
0B15:  MOVLW  70
0B16:  MOVWF  34
0B17:  BCF    0A.3
0B18:  BCF    03.6
0B19:  CALL   042
0B1A:  BSF    0A.3
0B1B:  MOVF   7A,W
0B1C:  BSF    03.6
0B1D:  MOVWF  33
0B1E:  MOVF   79,W
0B1F:  MOVWF  32
0B20:  MOVF   78,W
0B21:  MOVWF  31
0B22:  MOVF   77,W
0B23:  MOVWF  30
0B24:  BCF    0A.3
0B25:  BCF    03.6
0B26:  CALL   7C5
0B27:  BSF    0A.3
0B28:  MOVF   79,W
0B29:  BSF    03.6
0B2A:  MOVWF  2E
0B2B:  MOVF   78,W
0B2C:  MOVWF  2D
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
0B2D:  MOVF   28,W
0B2E:  MOVWF  33
0B2F:  MOVF   27,W
0B30:  MOVWF  32
0B31:  MOVF   26,W
0B32:  MOVWF  31
0B33:  MOVF   25,W
0B34:  MOVWF  30
0B35:  CLRF   37
0B36:  CLRF   36
0B37:  CLRF   35
0B38:  MOVLW  70
0B39:  MOVWF  34
0B3A:  BCF    0A.3
0B3B:  BCF    03.6
0B3C:  CALL   042
0B3D:  BSF    0A.3
0B3E:  MOVF   7A,W
0B3F:  BSF    03.6
0B40:  MOVWF  33
0B41:  MOVF   79,W
0B42:  MOVWF  32
0B43:  MOVF   78,W
0B44:  MOVWF  31
0B45:  MOVF   77,W
0B46:  MOVWF  30
0B47:  MOVF   2E,W
0B48:  MOVWF  35
0B49:  MOVF   2D,W
0B4A:  MOVWF  34
0B4B:  BCF    0A.3
0B4C:  BCF    03.6
0B4D:  CALL   023
0B4E:  BSF    0A.3
0B4F:  BSF    03.1
0B50:  BSF    03.6
0B51:  MOVF   33,W
0B52:  MOVWF  37
0B53:  MOVF   32,W
0B54:  MOVWF  36
0B55:  MOVF   31,W
0B56:  MOVWF  35
0B57:  MOVF   30,W
0B58:  MOVWF  34
0B59:  MOVF   7A,W
0B5A:  MOVWF  3B
0B5B:  MOVF   79,W
0B5C:  MOVWF  3A
0B5D:  MOVF   78,W
0B5E:  MOVWF  39
0B5F:  MOVF   77,W
0B60:  MOVWF  38
0B61:  BCF    03.6
0B62:  CALL   10E
0B63:  BSF    03.6
0B64:  CLRF   33
0B65:  CLRF   32
0B66:  CLRF   31
0B67:  MOVLW  8E
0B68:  MOVWF  30
0B69:  MOVF   7A,W
0B6A:  MOVWF  37
0B6B:  MOVF   79,W
0B6C:  MOVWF  36
0B6D:  MOVF   78,W
0B6E:  MOVWF  35
0B6F:  MOVF   77,W
0B70:  MOVWF  34
0B71:  BCF    0A.3
0B72:  BCF    03.6
0B73:  CALL   042
0B74:  BSF    0A.3
0B75:  MOVF   7A,W
0B76:  BSF    03.6
0B77:  MOVWF  28
0B78:  MOVF   79,W
0B79:  MOVWF  27
0B7A:  MOVF   78,W
0B7B:  MOVWF  26
0B7C:  MOVF   77,W
0B7D:  MOVWF  25
....................       res = 32768.0*(float32)l;
0B7E:  MOVF   2E,W
0B7F:  MOVWF  35
0B80:  MOVF   2D,W
0B81:  MOVWF  34
0B82:  BCF    0A.3
0B83:  BCF    03.6
0B84:  CALL   023
0B85:  BSF    0A.3
0B86:  BSF    03.6
0B87:  CLRF   33
0B88:  CLRF   32
0B89:  CLRF   31
0B8A:  MOVLW  8E
0B8B:  MOVWF  30
0B8C:  MOVF   7A,W
0B8D:  MOVWF  37
0B8E:  MOVF   79,W
0B8F:  MOVWF  36
0B90:  MOVF   78,W
0B91:  MOVWF  35
0B92:  MOVF   77,W
0B93:  MOVWF  34
0B94:  BCF    0A.3
0B95:  BCF    03.6
0B96:  CALL   042
0B97:  BSF    0A.3
0B98:  MOVF   7A,W
0B99:  BSF    03.6
0B9A:  MOVWF  2C
0B9B:  MOVF   79,W
0B9C:  MOVWF  2B
0B9D:  MOVF   78,W
0B9E:  MOVWF  2A
0B9F:  MOVF   77,W
0BA0:  MOVWF  29
....................       res += (float32)(unsigned int16)y;
0BA1:  MOVF   28,W
0BA2:  MOVWF  33
0BA3:  MOVF   27,W
0BA4:  MOVWF  32
0BA5:  MOVF   26,W
0BA6:  MOVWF  31
0BA7:  MOVF   25,W
0BA8:  MOVWF  30
0BA9:  BCF    0A.3
0BAA:  BCF    03.6
0BAB:  CALL   7C5
0BAC:  BSF    0A.3
0BAD:  MOVF   79,W
0BAE:  BSF    03.6
0BAF:  MOVWF  35
0BB0:  MOVF   78,W
0BB1:  MOVWF  34
0BB2:  BCF    0A.3
0BB3:  BCF    03.6
0BB4:  CALL   023
0BB5:  BSF    0A.3
0BB6:  BCF    03.1
0BB7:  BSF    03.6
0BB8:  MOVF   2C,W
0BB9:  MOVWF  37
0BBA:  MOVF   2B,W
0BBB:  MOVWF  36
0BBC:  MOVF   2A,W
0BBD:  MOVWF  35
0BBE:  MOVF   29,W
0BBF:  MOVWF  34
0BC0:  MOVF   7A,W
0BC1:  MOVWF  3B
0BC2:  MOVF   79,W
0BC3:  MOVWF  3A
0BC4:  MOVF   78,W
0BC5:  MOVWF  39
0BC6:  MOVF   77,W
0BC7:  MOVWF  38
0BC8:  BCF    03.6
0BC9:  CALL   10E
0BCA:  MOVF   7A,W
0BCB:  BSF    03.6
0BCC:  MOVWF  2C
0BCD:  MOVF   79,W
0BCE:  MOVWF  2B
0BCF:  MOVF   78,W
0BD0:  MOVWF  2A
0BD1:  MOVF   77,W
0BD2:  MOVWF  29
....................    }
0BD3:  GOTO   3DE
0BD4:  BCF    03.6
.................... 
....................  else
....................   res = y;
0BD5:  BSF    03.6
0BD6:  MOVF   28,W
0BD7:  MOVWF  2C
0BD8:  MOVF   27,W
0BD9:  MOVWF  2B
0BDA:  MOVF   26,W
0BDB:  MOVWF  2A
0BDC:  MOVF   25,W
0BDD:  MOVWF  29
.................... 
....................  y = y - (float32)(unsigned int16)y;
0BDE:  MOVF   28,W
0BDF:  MOVWF  33
0BE0:  MOVF   27,W
0BE1:  MOVWF  32
0BE2:  MOVF   26,W
0BE3:  MOVWF  31
0BE4:  MOVF   25,W
0BE5:  MOVWF  30
0BE6:  BCF    0A.3
0BE7:  BCF    03.6
0BE8:  CALL   7C5
0BE9:  BSF    0A.3
0BEA:  MOVF   79,W
0BEB:  BSF    03.6
0BEC:  MOVWF  35
0BED:  MOVF   78,W
0BEE:  MOVWF  34
0BEF:  BCF    0A.3
0BF0:  BCF    03.6
0BF1:  CALL   023
0BF2:  BSF    0A.3
0BF3:  BSF    03.1
0BF4:  BSF    03.6
0BF5:  MOVF   28,W
0BF6:  MOVWF  37
0BF7:  MOVF   27,W
0BF8:  MOVWF  36
0BF9:  MOVF   26,W
0BFA:  MOVWF  35
0BFB:  MOVF   25,W
0BFC:  MOVWF  34
0BFD:  MOVF   7A,W
0BFE:  MOVWF  3B
0BFF:  MOVF   79,W
0C00:  MOVWF  3A
0C01:  MOVF   78,W
0C02:  MOVWF  39
0C03:  MOVF   77,W
0C04:  MOVWF  38
0C05:  BCF    03.6
0C06:  CALL   10E
0C07:  MOVF   7A,W
0C08:  BSF    03.6
0C09:  MOVWF  28
0C0A:  MOVF   79,W
0C0B:  MOVWF  27
0C0C:  MOVF   78,W
0C0D:  MOVWF  26
0C0E:  MOVF   77,W
0C0F:  MOVWF  25
.................... 
....................  if (s)
0C10:  BTFSS  2F.0
0C11:  GOTO   415
....................   res = -res;
0C12:  MOVF   2A,W
0C13:  XORLW  80
0C14:  MOVWF  2A
.................... 
....................  if (y != 0)
0C15:  MOVF   28,W
0C16:  MOVWF  33
0C17:  MOVF   27,W
0C18:  MOVWF  32
0C19:  MOVF   26,W
0C1A:  MOVWF  31
0C1B:  MOVF   25,W
0C1C:  MOVWF  30
0C1D:  CLRF   37
0C1E:  CLRF   36
0C1F:  CLRF   35
0C20:  CLRF   34
0C21:  BCF    03.6
0C22:  CALL   254
0C23:  BTFSC  03.2
0C24:  GOTO   462
....................  {
....................   if (s == 1 && n == 0)
0C25:  BSF    03.6
0C26:  BTFSS  2F.0
0C27:  GOTO   444
0C28:  MOVF   24,F
0C29:  BTFSS  03.2
0C2A:  GOTO   444
....................    res -= 1.0;
0C2B:  BSF    03.1
0C2C:  MOVF   2C,W
0C2D:  MOVWF  37
0C2E:  MOVF   2B,W
0C2F:  MOVWF  36
0C30:  MOVF   2A,W
0C31:  MOVWF  35
0C32:  MOVF   29,W
0C33:  MOVWF  34
0C34:  CLRF   3B
0C35:  CLRF   3A
0C36:  CLRF   39
0C37:  MOVLW  7F
0C38:  MOVWF  38
0C39:  BCF    03.6
0C3A:  CALL   10E
0C3B:  MOVF   7A,W
0C3C:  BSF    03.6
0C3D:  MOVWF  2C
0C3E:  MOVF   79,W
0C3F:  MOVWF  2B
0C40:  MOVF   78,W
0C41:  MOVWF  2A
0C42:  MOVF   77,W
0C43:  MOVWF  29
.................... 
....................   if (s == 0 && n == 1)
0C44:  BTFSC  2F.0
0C45:  GOTO   461
0C46:  DECFSZ 24,W
0C47:  GOTO   461
....................    res += 1.0;
0C48:  BCF    03.1
0C49:  MOVF   2C,W
0C4A:  MOVWF  37
0C4B:  MOVF   2B,W
0C4C:  MOVWF  36
0C4D:  MOVF   2A,W
0C4E:  MOVWF  35
0C4F:  MOVF   29,W
0C50:  MOVWF  34
0C51:  CLRF   3B
0C52:  CLRF   3A
0C53:  CLRF   39
0C54:  MOVLW  7F
0C55:  MOVWF  38
0C56:  BCF    03.6
0C57:  CALL   10E
0C58:  MOVF   7A,W
0C59:  BSF    03.6
0C5A:  MOVWF  2C
0C5B:  MOVF   79,W
0C5C:  MOVWF  2B
0C5D:  MOVF   78,W
0C5E:  MOVWF  2A
0C5F:  MOVF   77,W
0C60:  MOVWF  29
0C61:  BCF    03.6
....................  }
....................  if (x == 0)
0C62:  BSF    03.6
0C63:  MOVF   23,W
0C64:  MOVWF  33
0C65:  MOVF   22,W
0C66:  MOVWF  32
0C67:  MOVF   21,W
0C68:  MOVWF  31
0C69:  MOVF   20,W
0C6A:  MOVWF  30
0C6B:  CLRF   37
0C6C:  CLRF   36
0C6D:  CLRF   35
0C6E:  CLRF   34
0C6F:  BCF    03.6
0C70:  CALL   254
0C71:  BTFSS  03.2
0C72:  GOTO   479
....................     res = 0;
0C73:  BSF    03.6
0C74:  CLRF   2C
0C75:  CLRF   2B
0C76:  CLRF   2A
0C77:  CLRF   29
0C78:  BCF    03.6
.................... 
....................  return (res);
0C79:  BSF    03.6
0C7A:  MOVF   29,W
0C7B:  MOVWF  77
0C7C:  MOVF   2A,W
0C7D:  MOVWF  78
0C7E:  MOVF   2B,W
0C7F:  MOVWF  79
0C80:  MOVF   2C,W
0C81:  MOVWF  7A
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
*
0A95:  BSF    03.6
0A96:  MOVF   1F,W
0A97:  MOVWF  23
0A98:  MOVF   1E,W
0A99:  MOVWF  22
0A9A:  MOVF   1D,W
0A9B:  MOVWF  21
0A9C:  MOVF   1C,W
0A9D:  MOVWF  20
0A9E:  MOVLW  01
0A9F:  MOVWF  24
*
0C82:  BCF    03.6
0C83:  RETURN
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
02AB:  BSF    08.3
....................    output_float(LCD_DATA5);
02AC:  BSF    08.4
....................    output_float(LCD_DATA6);
02AD:  BSF    08.5
....................    output_float(LCD_DATA7);
02AE:  BSF    08.6
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
02AF:  BCF    03.5
02B0:  BSF    08.1
02B1:  BSF    03.5
02B2:  BCF    08.1
....................    delay_cycles(1);
02B3:  NOP
....................    lcd_output_enable(1);
02B4:  BCF    03.5
02B5:  BSF    08.2
02B6:  BSF    03.5
02B7:  BCF    08.2
....................    delay_cycles(1);
02B8:  NOP
....................    high = lcd_read_nibble();
*
02E9:  MOVF   78,W
02EA:  MOVWF  6A
....................       
....................    lcd_output_enable(0);
02EB:  BCF    03.5
02EC:  BCF    08.2
02ED:  BSF    03.5
02EE:  BCF    08.2
....................    delay_cycles(1);
02EF:  NOP
....................    lcd_output_enable(1);
02F0:  BCF    03.5
02F1:  BSF    08.2
02F2:  BSF    03.5
02F3:  BCF    08.2
....................    delay_us(1);
02F4:  GOTO   2F5
02F5:  GOTO   2F6
....................    low = lcd_read_nibble();
*
0326:  MOVF   78,W
0327:  MOVWF  69
....................       
....................    lcd_output_enable(0);
0328:  BCF    03.5
0329:  BCF    08.2
032A:  BSF    03.5
032B:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
032C:  BCF    08.3
....................    output_drive(LCD_DATA5);
032D:  BCF    08.4
....................    output_drive(LCD_DATA6);
032E:  BCF    08.5
....................    output_drive(LCD_DATA7);
032F:  BCF    08.6
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0330:  SWAPF  6A,W
0331:  MOVWF  77
0332:  MOVLW  F0
0333:  ANDWF  77,F
0334:  MOVF   77,W
0335:  IORWF  69,W
0336:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
02B9:  CLRF   6B
*
02F6:  CLRF   6B
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
*
02BA:  BSF    08.3
02BB:  MOVLW  00
02BC:  BCF    03.5
02BD:  BTFSC  08.3
02BE:  MOVLW  01
02BF:  BSF    03.5
02C0:  IORWF  6B,F
*
02F7:  BSF    08.3
02F8:  MOVLW  00
02F9:  BCF    03.5
02FA:  BTFSC  08.3
02FB:  MOVLW  01
02FC:  BSF    03.5
02FD:  IORWF  6B,F
....................    n |= input(LCD_DATA5) << 1;
*
02C1:  BSF    08.4
02C2:  MOVLW  00
02C3:  BCF    03.5
02C4:  BTFSC  08.4
02C5:  MOVLW  01
02C6:  MOVWF  77
02C7:  BCF    03.0
02C8:  RLF    77,F
02C9:  MOVF   77,W
02CA:  BSF    03.5
02CB:  IORWF  6B,F
*
02FE:  BSF    08.4
02FF:  MOVLW  00
0300:  BCF    03.5
0301:  BTFSC  08.4
0302:  MOVLW  01
0303:  MOVWF  77
0304:  BCF    03.0
0305:  RLF    77,F
0306:  MOVF   77,W
0307:  BSF    03.5
0308:  IORWF  6B,F
....................    n |= input(LCD_DATA6) << 2;
*
02CC:  BSF    08.5
02CD:  MOVLW  00
02CE:  BCF    03.5
02CF:  BTFSC  08.5
02D0:  MOVLW  01
02D1:  MOVWF  77
02D2:  RLF    77,F
02D3:  RLF    77,F
02D4:  MOVLW  FC
02D5:  ANDWF  77,F
02D6:  MOVF   77,W
02D7:  BSF    03.5
02D8:  IORWF  6B,F
*
0309:  BSF    08.5
030A:  MOVLW  00
030B:  BCF    03.5
030C:  BTFSC  08.5
030D:  MOVLW  01
030E:  MOVWF  77
030F:  RLF    77,F
0310:  RLF    77,F
0311:  MOVLW  FC
0312:  ANDWF  77,F
0313:  MOVF   77,W
0314:  BSF    03.5
0315:  IORWF  6B,F
....................    n |= input(LCD_DATA7) << 3;
*
02D9:  BSF    08.6
02DA:  MOVLW  00
02DB:  BCF    03.5
02DC:  BTFSC  08.6
02DD:  MOVLW  01
02DE:  MOVWF  77
02DF:  RLF    77,F
02E0:  RLF    77,F
02E1:  RLF    77,F
02E2:  MOVLW  F8
02E3:  ANDWF  77,F
02E4:  MOVF   77,W
02E5:  BSF    03.5
02E6:  IORWF  6B,F
*
0316:  BSF    08.6
0317:  MOVLW  00
0318:  BCF    03.5
0319:  BTFSC  08.6
031A:  MOVLW  01
031B:  MOVWF  77
031C:  RLF    77,F
031D:  RLF    77,F
031E:  RLF    77,F
031F:  MOVLW  F8
0320:  ANDWF  77,F
0321:  MOVF   77,W
0322:  BSF    03.5
0323:  IORWF  6B,F
....................    
....................    return(n);
*
02E7:  MOVF   6B,W
02E8:  MOVWF  78
*
0324:  MOVF   6B,W
0325:  MOVWF  78
....................   #else
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0356:  BTFSC  6A.0
0357:  GOTO   35C
0358:  BCF    03.5
0359:  BCF    08.3
035A:  GOTO   35E
035B:  BSF    03.5
035C:  BCF    03.5
035D:  BSF    08.3
035E:  BSF    03.5
035F:  BCF    08.3
*
0391:  BTFSC  6A.0
0392:  GOTO   397
0393:  BCF    03.5
0394:  BCF    08.3
0395:  GOTO   399
0396:  BSF    03.5
0397:  BCF    03.5
0398:  BSF    08.3
0399:  BSF    03.5
039A:  BCF    08.3
*
0CB6:  BTFSC  6A.0
0CB7:  GOTO   4BC
0CB8:  BCF    03.5
0CB9:  BCF    08.3
0CBA:  GOTO   4BE
0CBB:  BSF    03.5
0CBC:  BCF    03.5
0CBD:  BSF    08.3
0CBE:  BSF    03.5
0CBF:  BCF    08.3
*
0CF7:  BTFSC  6A.0
0CF8:  GOTO   4FD
0CF9:  BCF    03.5
0CFA:  BCF    08.3
0CFB:  GOTO   4FF
0CFC:  BSF    03.5
0CFD:  BCF    03.5
0CFE:  BSF    08.3
0CFF:  BSF    03.5
0D00:  BCF    08.3
....................    output_bit(LCD_DATA5, bit_test(n, 1));
*
0360:  BTFSC  6A.1
0361:  GOTO   366
0362:  BCF    03.5
0363:  BCF    08.4
0364:  GOTO   368
0365:  BSF    03.5
0366:  BCF    03.5
0367:  BSF    08.4
0368:  BSF    03.5
0369:  BCF    08.4
*
039B:  BTFSC  6A.1
039C:  GOTO   3A1
039D:  BCF    03.5
039E:  BCF    08.4
039F:  GOTO   3A3
03A0:  BSF    03.5
03A1:  BCF    03.5
03A2:  BSF    08.4
03A3:  BSF    03.5
03A4:  BCF    08.4
*
0CC0:  BTFSC  6A.1
0CC1:  GOTO   4C6
0CC2:  BCF    03.5
0CC3:  BCF    08.4
0CC4:  GOTO   4C8
0CC5:  BSF    03.5
0CC6:  BCF    03.5
0CC7:  BSF    08.4
0CC8:  BSF    03.5
0CC9:  BCF    08.4
*
0D01:  BTFSC  6A.1
0D02:  GOTO   507
0D03:  BCF    03.5
0D04:  BCF    08.4
0D05:  GOTO   509
0D06:  BSF    03.5
0D07:  BCF    03.5
0D08:  BSF    08.4
0D09:  BSF    03.5
0D0A:  BCF    08.4
....................    output_bit(LCD_DATA6, bit_test(n, 2));
*
036A:  BTFSC  6A.2
036B:  GOTO   370
036C:  BCF    03.5
036D:  BCF    08.5
036E:  GOTO   372
036F:  BSF    03.5
0370:  BCF    03.5
0371:  BSF    08.5
0372:  BSF    03.5
0373:  BCF    08.5
*
03A5:  BTFSC  6A.2
03A6:  GOTO   3AB
03A7:  BCF    03.5
03A8:  BCF    08.5
03A9:  GOTO   3AD
03AA:  BSF    03.5
03AB:  BCF    03.5
03AC:  BSF    08.5
03AD:  BSF    03.5
03AE:  BCF    08.5
*
0CCA:  BTFSC  6A.2
0CCB:  GOTO   4D0
0CCC:  BCF    03.5
0CCD:  BCF    08.5
0CCE:  GOTO   4D2
0CCF:  BSF    03.5
0CD0:  BCF    03.5
0CD1:  BSF    08.5
0CD2:  BSF    03.5
0CD3:  BCF    08.5
*
0D0B:  BTFSC  6A.2
0D0C:  GOTO   511
0D0D:  BCF    03.5
0D0E:  BCF    08.5
0D0F:  GOTO   513
0D10:  BSF    03.5
0D11:  BCF    03.5
0D12:  BSF    08.5
0D13:  BSF    03.5
0D14:  BCF    08.5
....................    output_bit(LCD_DATA7, bit_test(n, 3));
*
0374:  BTFSC  6A.3
0375:  GOTO   37A
0376:  BCF    03.5
0377:  BCF    08.6
0378:  GOTO   37C
0379:  BSF    03.5
037A:  BCF    03.5
037B:  BSF    08.6
037C:  BSF    03.5
037D:  BCF    08.6
*
03AF:  BTFSC  6A.3
03B0:  GOTO   3B5
03B1:  BCF    03.5
03B2:  BCF    08.6
03B3:  GOTO   3B7
03B4:  BSF    03.5
03B5:  BCF    03.5
03B6:  BSF    08.6
03B7:  BSF    03.5
03B8:  BCF    08.6
*
0CD4:  BTFSC  6A.3
0CD5:  GOTO   4DA
0CD6:  BCF    03.5
0CD7:  BCF    08.6
0CD8:  GOTO   4DC
0CD9:  BSF    03.5
0CDA:  BCF    03.5
0CDB:  BSF    08.6
0CDC:  BSF    03.5
0CDD:  BCF    08.6
*
0D15:  BTFSC  6A.3
0D16:  GOTO   51B
0D17:  BCF    03.5
0D18:  BCF    08.6
0D19:  GOTO   51D
0D1A:  BSF    03.5
0D1B:  BCF    03.5
0D1C:  BSF    08.6
0D1D:  BSF    03.5
0D1E:  BCF    08.6
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
*
037E:  NOP
*
03B9:  NOP
*
0CDE:  NOP
*
0D1F:  NOP
....................    lcd_output_enable(1);
*
037F:  BCF    03.5
0380:  BSF    08.2
0381:  BSF    03.5
0382:  BCF    08.2
*
03BA:  BCF    03.5
03BB:  BSF    08.2
03BC:  BSF    03.5
03BD:  BCF    08.2
*
0CDF:  BCF    03.5
0CE0:  BSF    08.2
0CE1:  BSF    03.5
0CE2:  BCF    08.2
*
0D20:  BCF    03.5
0D21:  BSF    08.2
0D22:  BSF    03.5
0D23:  BCF    08.2
....................    delay_us(2);
*
0383:  MOVLW  02
0384:  MOVWF  77
0385:  DECFSZ 77,F
0386:  GOTO   385
0387:  NOP
*
03BE:  MOVLW  02
03BF:  MOVWF  77
03C0:  DECFSZ 77,F
03C1:  GOTO   3C0
03C2:  NOP
*
0CE3:  MOVLW  02
0CE4:  MOVWF  77
0CE5:  DECFSZ 77,F
0CE6:  GOTO   4E5
0CE7:  NOP
*
0D24:  MOVLW  02
0D25:  MOVWF  77
0D26:  DECFSZ 77,F
0D27:  GOTO   526
0D28:  NOP
....................    lcd_output_enable(0);
*
0388:  BCF    03.5
0389:  BCF    08.2
038A:  BSF    03.5
038B:  BCF    08.2
*
03C3:  BCF    03.5
03C4:  BCF    08.2
03C5:  BSF    03.5
03C6:  BCF    08.2
*
0CE8:  BCF    03.5
0CE9:  BCF    08.2
0CEA:  BSF    03.5
0CEB:  BCF    08.2
*
0D29:  BCF    03.5
0D2A:  BCF    08.2
0D2B:  BSF    03.5
0D2C:  BCF    08.2
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
02A3:  BSF    03.5
02A4:  BCF    08.2
....................    lcd_rs_tris();
02A5:  BCF    08.0
....................    lcd_rw_tris();
02A6:  BCF    08.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
02A7:  BCF    03.5
02A8:  BCF    08.0
02A9:  BSF    03.5
02AA:  BCF    08.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0337:  MOVF   78,W
0338:  MOVWF  69
0339:  BTFSC  69.7
033A:  GOTO   2AB
....................    lcd_output_rs(address);
033B:  MOVF   67,F
033C:  BTFSS  03.2
033D:  GOTO   342
033E:  BCF    03.5
033F:  BCF    08.0
0340:  GOTO   344
0341:  BSF    03.5
0342:  BCF    03.5
0343:  BSF    08.0
0344:  BSF    03.5
0345:  BCF    08.0
....................    delay_cycles(1);
0346:  NOP
....................    lcd_output_rw(0);
0347:  BCF    03.5
0348:  BCF    08.1
0349:  BSF    03.5
034A:  BCF    08.1
....................    delay_cycles(1);
034B:  NOP
....................    lcd_output_enable(0);
034C:  BCF    03.5
034D:  BCF    08.2
034E:  BSF    03.5
034F:  BCF    08.2
....................    lcd_send_nibble(n >> 4);
0350:  SWAPF  68,W
0351:  MOVWF  69
0352:  MOVLW  0F
0353:  ANDWF  69,F
0354:  MOVF   69,W
0355:  MOVWF  6A
....................    lcd_send_nibble(n & 0xf);
*
038C:  MOVF   68,W
038D:  ANDLW  0F
038E:  MOVWF  69
038F:  MOVF   69,W
0390:  MOVWF  6A
*
03C7:  BCF    03.5
03C8:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
*
0C8B:  MOVLW  28
0C8C:  BSF    03.5
0C8D:  MOVWF  36
0C8E:  MOVLW  0C
0C8F:  MOVWF  37
0C90:  MOVLW  01
0C91:  MOVWF  38
0C92:  MOVLW  06
0C93:  MOVWF  39
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0C94:  BCF    03.5
0C95:  BCF    08.2
0C96:  BSF    03.5
0C97:  BCF    08.2
....................    lcd_output_rs(0);
0C98:  BCF    03.5
0C99:  BCF    08.0
0C9A:  BSF    03.5
0C9B:  BCF    08.0
....................    lcd_output_rw(0);
0C9C:  BCF    03.5
0C9D:  BCF    08.1
0C9E:  BSF    03.5
0C9F:  BCF    08.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0CA0:  BCF    08.3
....................    output_drive(LCD_DATA5);
0CA1:  BCF    08.4
....................    output_drive(LCD_DATA6);
0CA2:  BCF    08.5
....................    output_drive(LCD_DATA7);
0CA3:  BCF    08.6
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0CA4:  BCF    08.2
....................    lcd_rs_tris();
0CA5:  BCF    08.0
....................    lcd_rw_tris();
0CA6:  BCF    08.1
....................  #endif
....................     
....................    delay_ms(15);
0CA7:  MOVLW  0F
0CA8:  MOVWF  63
0CA9:  BCF    0A.3
0CAA:  BCF    03.5
0CAB:  CALL   00E
0CAC:  BSF    0A.3
....................    for(i=1;i<=3;++i)
0CAD:  MOVLW  01
0CAE:  BSF    03.5
0CAF:  MOVWF  35
0CB0:  MOVF   35,W
0CB1:  SUBLW  03
0CB2:  BTFSS  03.0
0CB3:  GOTO   4F5
....................    {
....................        lcd_send_nibble(3);
0CB4:  MOVLW  03
0CB5:  MOVWF  6A
....................        delay_ms(5);
*
0CEC:  MOVLW  05
0CED:  MOVWF  63
0CEE:  BCF    0A.3
0CEF:  BCF    03.5
0CF0:  CALL   00E
0CF1:  BSF    0A.3
0CF2:  BSF    03.5
0CF3:  INCF   35,F
0CF4:  GOTO   4B0
....................    }
....................    
....................    lcd_send_nibble(2);
0CF5:  MOVLW  02
0CF6:  MOVWF  6A
....................    delay_ms(5);
*
0D2D:  MOVLW  05
0D2E:  MOVWF  63
0D2F:  BCF    0A.3
0D30:  BCF    03.5
0D31:  CALL   00E
0D32:  BSF    0A.3
....................    for(i=0;i<=3;++i)
0D33:  BSF    03.5
0D34:  CLRF   35
0D35:  MOVF   35,W
0D36:  SUBLW  03
0D37:  BTFSS  03.0
0D38:  GOTO   549
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0D39:  MOVLW  B6
0D3A:  ADDWF  35,W
0D3B:  MOVWF  04
0D3C:  BCF    03.7
0D3D:  MOVF   00,W
0D3E:  MOVWF  3A
0D3F:  CLRF   67
0D40:  MOVF   3A,W
0D41:  MOVWF  68
0D42:  BCF    0A.3
0D43:  BCF    03.5
0D44:  CALL   2A3
0D45:  BSF    0A.3
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0D46:  BSF    03.5
0D47:  INCF   35,F
0D48:  GOTO   535
0D49:  BCF    03.5
0D4A:  BSF    0A.3
0D4B:  BCF    0A.4
0D4C:  GOTO   5BE (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
03DD:  DECFSZ 64,W
03DE:  GOTO   3E0
03DF:  GOTO   3E3
*
0401:  DECFSZ 64,W
0402:  GOTO   404
0403:  GOTO   407
*
06F3:  DECFSZ 64,W
06F4:  GOTO   6F6
06F5:  GOTO   6F9
*
074D:  DECFSZ 64,W
074E:  GOTO   750
074F:  GOTO   753
....................       address=LCD_LINE_TWO;
*
03E0:  MOVLW  40
03E1:  MOVWF  65
03E2:  GOTO   3E4
*
0404:  MOVLW  40
0405:  MOVWF  65
0406:  GOTO   408
*
06F6:  MOVLW  40
06F7:  MOVWF  65
06F8:  GOTO   6FA
*
0750:  MOVLW  40
0751:  MOVWF  65
0752:  GOTO   754
....................    else
....................       address=0;
*
03E3:  CLRF   65
*
0407:  CLRF   65
*
06F9:  CLRF   65
*
0753:  CLRF   65
....................      
....................    address+=x-1;
*
03E4:  MOVLW  01
03E5:  SUBWF  63,W
03E6:  ADDWF  65,F
*
0408:  MOVLW  01
0409:  SUBWF  63,W
040A:  ADDWF  65,F
*
06FA:  MOVLW  01
06FB:  SUBWF  63,W
06FC:  ADDWF  65,F
*
0754:  MOVLW  01
0755:  SUBWF  63,W
0756:  ADDWF  65,F
....................    lcd_send_byte(0,0x80|address);
*
03E7:  MOVF   65,W
03E8:  IORLW  80
03E9:  MOVWF  66
03EA:  CLRF   67
03EB:  MOVF   66,W
03EC:  MOVWF  68
03ED:  BCF    03.5
03EE:  CALL   2A3
*
040B:  MOVF   65,W
040C:  IORLW  80
040D:  MOVWF  66
040E:  CLRF   67
040F:  MOVF   66,W
0410:  MOVWF  68
0411:  BCF    03.5
0412:  CALL   2A3
*
06FD:  MOVF   65,W
06FE:  IORLW  80
06FF:  MOVWF  66
0700:  CLRF   67
0701:  MOVF   66,W
0702:  MOVWF  68
0703:  BCF    03.5
0704:  CALL   2A3
*
0757:  MOVF   65,W
0758:  IORLW  80
0759:  MOVWF  66
075A:  CLRF   67
075B:  MOVF   66,W
075C:  MOVWF  68
075D:  BCF    03.5
075E:  CALL   2A3
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
*
03C9:  BSF    03.5
03CA:  MOVF   62,W
03CB:  XORLW  07
03CC:  BCF    03.5
03CD:  BTFSC  03.2
03CE:  GOTO   3D9
03CF:  XORLW  0B
03D0:  BTFSC  03.2
03D1:  GOTO   3F0
03D2:  XORLW  06
03D3:  BTFSC  03.2
03D4:  GOTO   3FC
03D5:  XORLW  02
03D6:  BTFSC  03.2
03D7:  GOTO   414
03D8:  GOTO   41B
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
03D9:  MOVLW  01
03DA:  BSF    03.5
03DB:  MOVWF  63
03DC:  MOVWF  64
*
03EF:  GOTO   422
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
03F0:  BSF    03.5
03F1:  CLRF   67
03F2:  MOVLW  01
03F3:  MOVWF  68
03F4:  BCF    03.5
03F5:  CALL   2A3
....................                      delay_ms(2);
03F6:  MOVLW  02
03F7:  BSF    03.5
03F8:  MOVWF  63
03F9:  BCF    03.5
03FA:  CALL   00E
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
03FB:  GOTO   422
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
03FC:  MOVLW  01
03FD:  BSF    03.5
03FE:  MOVWF  63
03FF:  MOVLW  02
0400:  MOVWF  64
*
0413:  GOTO   422
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0414:  BSF    03.5
0415:  CLRF   67
0416:  MOVLW  10
0417:  MOVWF  68
0418:  BCF    03.5
0419:  CALL   2A3
041A:  GOTO   422
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
041B:  MOVLW  01
041C:  BSF    03.5
041D:  MOVWF  67
041E:  MOVF   62,W
041F:  MOVWF  68
0420:  BCF    03.5
0421:  CALL   2A3
....................      #endif
....................    }
0422:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
....................   
.................... 
....................  
.................... #define LED PIN_E1 
.................... #define trig1 PIN_C0
.................... #define echo1 PIN_C1
.................... #define trig2 PIN_B2
.................... #define echo2 PIN_B3
.................... 
.................... #define Umax 66 // maximum angle of the servomotr in degrees
.................... #define Umin -66// minimun angle
.................... #define M_PI      3.14
.................... 
.................... #define Umax_rad 1.151  // maximum angle of the servomotr in radiants
.................... #define Umin_rad -1.151 // minimun angle
.................... #define T 0.09 
.................... 
.................... #define DELAY 500
.................... 
....................  #use rtos(timer = 2, minor_cycle = 10ms)
.................... 
.................... double target,target_prec, pos, pos_prec, time;
.................... 
....................  double kp_a = 0; 
....................  double ki_a = 0; 
....................  double kd_a = 0; 
....................  
....................  double kp = 13; 
....................  double ki = 1.1; 
....................  double kd = 6.3; 
....................  
....................  double error = 0;
....................  double P = 0;
....................  double I = 0;
....................  double D = 0;
....................  double U = 0;
....................  
....................  double I_prec=0, U_prec=0, D_prec=0, error_prec = 0;   
....................  
....................  
....................  int8 saturation;
....................  int16 say =0;
....................  
.................... 
....................  
.................... 
....................  
....................  
.................... unsigned long int  aci=0;
.................... 
.................... 
.................... void move_servo(unsigned long int  aci);
.................... 
.................... 
.................... 
.................... /*
.................... #INT_EXT
.................... void  EXT_isr(void) 
.................... {
.................... 
....................    kp =   kp_a; 
....................    ki =   ki_a;
....................    kd =   kd_a; 
....................    lcd_putc("\fEXT-INT");
....................    
....................  //  printf(lcd_putc," f\\"); 
....................   printf(" INT_EXT\n");
....................     
....................   delay_ms(100);
.................... }
.................... */
....................  
.................... void read_target()
.................... {
....................    setup_timer_1(t1_internal | t1_div_by_1);
*
00B9:  MOVLW  05
00BA:  MOVWF  10
....................     for(int i =  0; i < 5; i++)
00BB:  BSF    03.5
00BC:  CLRF   43
00BD:  MOVF   43,W
00BE:  SUBLW  04
00BF:  BTFSS  03.0
00C0:  GOTO   147
....................     {
....................        output_high(trig1);
00C1:  BCF    76.0
00C2:  MOVF   76,W
00C3:  MOVWF  07
00C4:  BCF    03.5
00C5:  BSF    07.0
....................        delay_ms(10);
00C6:  MOVLW  0A
00C7:  BSF    03.5
00C8:  MOVWF  63
00C9:  BCF    03.5
00CA:  CALL   00E
....................        output_low(trig1);
00CB:  BCF    76.0
00CC:  MOVF   76,W
00CD:  BSF    03.5
00CE:  MOVWF  07
00CF:  BCF    03.5
00D0:  BCF    07.0
....................       
....................        while(!input(echo1))
00D1:  BSF    76.1
00D2:  MOVF   76,W
00D3:  BSF    03.5
00D4:  MOVWF  07
00D5:  BCF    03.5
00D6:  BTFSS  07.1
....................        { }
00D7:  GOTO   0D1
....................        
....................        set_timer1(0);
00D8:  CLRF   0E
00D9:  CLRF   0F
00DA:  CLRF   0E
00DB:  NOP
....................        
....................        while(input(echo1))
00DC:  BSF    76.1
00DD:  MOVF   76,W
00DE:  BSF    03.5
00DF:  MOVWF  07
00E0:  BCF    03.5
00E1:  BTFSC  07.1
....................        { }
00E2:  GOTO   0DC
....................        
....................        time = get_timer1();
00E3:  MOVF   0F,W
00E4:  MOVWF  7A
00E5:  MOVF   0E,W
00E6:  MOVWF  77
00E7:  MOVF   0F,W
00E8:  SUBWF  7A,W
00E9:  BTFSS  03.2
00EA:  GOTO   0E3
00EB:  MOVF   77,W
00EC:  BSF    03.6
00ED:  MOVWF  34
00EE:  MOVF   7A,W
00EF:  MOVWF  35
00F0:  BCF    03.6
00F1:  CALL   023
00F2:  MOVF   7A,W
00F3:  MOVWF  34
00F4:  MOVF   79,W
00F5:  MOVWF  33
00F6:  MOVF   78,W
00F7:  MOVWF  32
00F8:  MOVF   77,W
00F9:  MOVWF  31
....................        
....................        target = time * 0.0037*0.01;    
00FA:  MOVF   34,W
00FB:  BSF    03.6
00FC:  MOVWF  33
00FD:  BCF    03.6
00FE:  MOVF   33,W
00FF:  BSF    03.6
0100:  MOVWF  32
0101:  BCF    03.6
0102:  MOVF   32,W
0103:  BSF    03.6
0104:  MOVWF  31
0105:  BCF    03.6
0106:  MOVF   31,W
0107:  BSF    03.6
0108:  MOVWF  30
0109:  MOVLW  B3
010A:  MOVWF  37
010B:  MOVLW  7B
010C:  MOVWF  36
010D:  MOVLW  72
010E:  MOVWF  35
010F:  MOVLW  76
0110:  MOVWF  34
0111:  BCF    03.6
0112:  CALL   042
0113:  MOVF   7A,W
0114:  BSF    03.5
0115:  MOVWF  47
0116:  MOVF   79,W
0117:  MOVWF  46
0118:  MOVF   78,W
0119:  MOVWF  45
011A:  MOVF   77,W
011B:  MOVWF  44
011C:  MOVF   47,W
011D:  BCF    03.5
011E:  BSF    03.6
011F:  MOVWF  33
0120:  BSF    03.5
0121:  BCF    03.6
0122:  MOVF   46,W
0123:  BCF    03.5
0124:  BSF    03.6
0125:  MOVWF  32
0126:  BSF    03.5
0127:  BCF    03.6
0128:  MOVF   45,W
0129:  BCF    03.5
012A:  BSF    03.6
012B:  MOVWF  31
012C:  BSF    03.5
012D:  BCF    03.6
012E:  MOVF   44,W
012F:  BCF    03.5
0130:  BSF    03.6
0131:  MOVWF  30
0132:  MOVLW  0A
0133:  MOVWF  37
0134:  MOVLW  D7
0135:  MOVWF  36
0136:  MOVLW  23
0137:  MOVWF  35
0138:  MOVLW  78
0139:  MOVWF  34
013A:  BCF    03.6
013B:  CALL   042
013C:  MOVF   7A,W
013D:  MOVWF  24
013E:  MOVF   79,W
013F:  MOVWF  23
0140:  MOVF   78,W
0141:  MOVWF  22
0142:  MOVF   77,W
0143:  MOVWF  21
0144:  BSF    03.5
0145:  INCF   43,F
0146:  GOTO   0BD
....................     }
....................     
....................     
.................... }
.................... 
.................... 
....................     void read_pos()
.................... {
....................    
....................    setup_timer_1(t1_internal | t1_div_by_1);
0147:  MOVLW  05
0148:  BCF    03.5
0149:  MOVWF  10
....................     for(int i =  0; i < 5; i++)
014A:  BSF    03.5
014B:  CLRF   43
014C:  MOVF   43,W
014D:  SUBLW  04
014E:  BTFSS  03.0
014F:  GOTO   1CE
....................     {
....................        output_high(trig2);
0150:  BCF    06.2
0151:  BCF    03.5
0152:  BSF    06.2
....................        delay_ms(10);
0153:  MOVLW  0A
0154:  BSF    03.5
0155:  MOVWF  63
0156:  BCF    03.5
0157:  CALL   00E
....................        output_low(trig2);
0158:  BSF    03.5
0159:  BCF    06.2
015A:  BCF    03.5
015B:  BCF    06.2
....................       
....................        while(!input(echo2))
015C:  BSF    03.5
015D:  BSF    06.3
015E:  BCF    03.5
015F:  BTFSS  06.3
....................        { }
0160:  GOTO   15C
....................        
....................        set_timer1(0);
0161:  CLRF   0E
0162:  CLRF   0F
0163:  CLRF   0E
0164:  NOP
....................        
....................        while(input(echo2))
0165:  BSF    03.5
0166:  BSF    06.3
0167:  BCF    03.5
0168:  BTFSC  06.3
....................        { }
0169:  GOTO   165
....................        
....................        time = get_timer1();
016A:  MOVF   0F,W
016B:  MOVWF  7A
016C:  MOVF   0E,W
016D:  MOVWF  77
016E:  MOVF   0F,W
016F:  SUBWF  7A,W
0170:  BTFSS  03.2
0171:  GOTO   16A
0172:  MOVF   77,W
0173:  BSF    03.6
0174:  MOVWF  34
0175:  MOVF   7A,W
0176:  MOVWF  35
0177:  BCF    03.6
0178:  CALL   023
0179:  MOVF   7A,W
017A:  MOVWF  34
017B:  MOVF   79,W
017C:  MOVWF  33
017D:  MOVF   78,W
017E:  MOVWF  32
017F:  MOVF   77,W
0180:  MOVWF  31
....................        
....................        pos = time * 0.0037*0.01;  
0181:  MOVF   34,W
0182:  BSF    03.6
0183:  MOVWF  33
0184:  BCF    03.6
0185:  MOVF   33,W
0186:  BSF    03.6
0187:  MOVWF  32
0188:  BCF    03.6
0189:  MOVF   32,W
018A:  BSF    03.6
018B:  MOVWF  31
018C:  BCF    03.6
018D:  MOVF   31,W
018E:  BSF    03.6
018F:  MOVWF  30
0190:  MOVLW  B3
0191:  MOVWF  37
0192:  MOVLW  7B
0193:  MOVWF  36
0194:  MOVLW  72
0195:  MOVWF  35
0196:  MOVLW  76
0197:  MOVWF  34
0198:  BCF    03.6
0199:  CALL   042
019A:  MOVF   7A,W
019B:  BSF    03.5
019C:  MOVWF  47
019D:  MOVF   79,W
019E:  MOVWF  46
019F:  MOVF   78,W
01A0:  MOVWF  45
01A1:  MOVF   77,W
01A2:  MOVWF  44
01A3:  MOVF   47,W
01A4:  BCF    03.5
01A5:  BSF    03.6
01A6:  MOVWF  33
01A7:  BSF    03.5
01A8:  BCF    03.6
01A9:  MOVF   46,W
01AA:  BCF    03.5
01AB:  BSF    03.6
01AC:  MOVWF  32
01AD:  BSF    03.5
01AE:  BCF    03.6
01AF:  MOVF   45,W
01B0:  BCF    03.5
01B1:  BSF    03.6
01B2:  MOVWF  31
01B3:  BSF    03.5
01B4:  BCF    03.6
01B5:  MOVF   44,W
01B6:  BCF    03.5
01B7:  BSF    03.6
01B8:  MOVWF  30
01B9:  MOVLW  0A
01BA:  MOVWF  37
01BB:  MOVLW  D7
01BC:  MOVWF  36
01BD:  MOVLW  23
01BE:  MOVWF  35
01BF:  MOVLW  78
01C0:  MOVWF  34
01C1:  BCF    03.6
01C2:  CALL   042
01C3:  MOVF   7A,W
01C4:  MOVWF  2C
01C5:  MOVF   79,W
01C6:  MOVWF  2B
01C7:  MOVF   78,W
01C8:  MOVWF  2A
01C9:  MOVF   77,W
01CA:  MOVWF  29
01CB:  BSF    03.5
01CC:  INCF   43,F
01CD:  GOTO   14C
....................       
....................     }
....................      
....................  
.................... }
.................... 
.................... 
.................... void get_pid_gains()
.................... {
.................... 
....................       setup_adc_ports(sAN0 , VSS_VDD);
*
05B6:  BSF    03.5
05B7:  BSF    03.6
05B8:  MOVF   09,W
05B9:  ANDLW  C0
05BA:  MOVWF  09
05BB:  BCF    03.6
05BC:  BCF    1F.4
05BD:  BCF    1F.5
05BE:  MOVLW  01
05BF:  BSF    03.6
05C0:  MOVWF  08
....................       set_adc_channel(0); 
05C1:  MOVLW  00
05C2:  MOVWF  78
05C3:  BCF    03.5
05C4:  BCF    03.6
05C5:  MOVF   1F,W
05C6:  ANDLW  C3
05C7:  IORWF  78,W
05C8:  MOVWF  1F
....................       delay_us(20);
05C9:  MOVLW  1A
05CA:  MOVWF  77
05CB:  DECFSZ 77,F
05CC:  GOTO   5CB
05CD:  NOP
....................       kp_a = (float)read_adc();     
05CE:  BSF    1F.1
05CF:  BTFSC  1F.1
05D0:  GOTO   5CF
05D1:  MOVF   1E,W
05D2:  MOVWF  79
05D3:  BSF    03.5
05D4:  MOVF   1E,W
05D5:  MOVWF  78
05D6:  MOVF   79,W
05D7:  MOVWF  7A
05D8:  MOVF   1E,W
05D9:  BCF    03.5
05DA:  BSF    03.6
05DB:  MOVWF  34
05DC:  MOVF   79,W
05DD:  MOVWF  35
05DE:  BCF    03.6
05DF:  CALL   023
05E0:  MOVF   7A,W
05E1:  MOVWF  38
05E2:  MOVF   79,W
05E3:  MOVWF  37
05E4:  MOVF   78,W
05E5:  MOVWF  36
05E6:  MOVF   77,W
05E7:  MOVWF  35
....................       kp_a /= 50.22;
05E8:  MOVF   38,W
05E9:  BSF    03.6
05EA:  MOVWF  33
05EB:  BCF    03.6
05EC:  MOVF   37,W
05ED:  BSF    03.6
05EE:  MOVWF  32
05EF:  BCF    03.6
05F0:  MOVF   36,W
05F1:  BSF    03.6
05F2:  MOVWF  31
05F3:  BCF    03.6
05F4:  MOVF   35,W
05F5:  BSF    03.6
05F6:  MOVWF  30
05F7:  MOVLW  48
05F8:  MOVWF  37
05F9:  MOVLW  E1
05FA:  MOVWF  36
05FB:  MOVLW  48
05FC:  MOVWF  35
05FD:  MOVLW  84
05FE:  MOVWF  34
05FF:  BCF    03.6
0600:  CALL   1D7
0601:  MOVF   7A,W
0602:  MOVWF  38
0603:  MOVF   79,W
0604:  MOVWF  37
0605:  MOVF   78,W
0606:  MOVWF  36
0607:  MOVF   77,W
0608:  MOVWF  35
....................       kp =   kp_a;
0609:  MOVF   38,W
060A:  MOVWF  44
060B:  MOVF   37,W
060C:  MOVWF  43
060D:  MOVF   36,W
060E:  MOVWF  42
060F:  MOVF   35,W
0610:  MOVWF  41
....................        
....................       delay_us(20);
0611:  MOVLW  1A
0612:  MOVWF  77
0613:  DECFSZ 77,F
0614:  GOTO   613
0615:  NOP
....................       setup_adc_ports(NO_ANALOGS);
0616:  BSF    03.5
0617:  BSF    03.6
0618:  MOVF   09,W
0619:  ANDLW  C0
061A:  MOVWF  09
061B:  BCF    03.6
061C:  BCF    1F.4
061D:  BCF    1F.5
061E:  MOVLW  00
061F:  BSF    03.6
0620:  MOVWF  08
....................       setup_adc_ports(sAN1 , VSS_VDD);
0621:  MOVF   09,W
0622:  ANDLW  C0
0623:  MOVWF  09
0624:  BCF    03.6
0625:  BCF    1F.4
0626:  BCF    1F.5
0627:  MOVLW  02
0628:  BSF    03.6
0629:  MOVWF  08
....................        
....................       set_adc_channel(1); 
062A:  MOVLW  04
062B:  MOVWF  78
062C:  BCF    03.5
062D:  BCF    03.6
062E:  MOVF   1F,W
062F:  ANDLW  C3
0630:  IORWF  78,W
0631:  MOVWF  1F
....................       delay_us(20);
0632:  MOVLW  1A
0633:  MOVWF  77
0634:  DECFSZ 77,F
0635:  GOTO   634
0636:  NOP
....................       ki_a = (float)read_adc();
0637:  BSF    1F.1
0638:  BTFSC  1F.1
0639:  GOTO   638
063A:  MOVF   1E,W
063B:  MOVWF  79
063C:  BSF    03.5
063D:  MOVF   1E,W
063E:  MOVWF  78
063F:  MOVF   79,W
0640:  MOVWF  7A
0641:  MOVF   1E,W
0642:  BCF    03.5
0643:  BSF    03.6
0644:  MOVWF  34
0645:  MOVF   79,W
0646:  MOVWF  35
0647:  BCF    03.6
0648:  CALL   023
0649:  MOVF   7A,W
064A:  MOVWF  3C
064B:  MOVF   79,W
064C:  MOVWF  3B
064D:  MOVF   78,W
064E:  MOVWF  3A
064F:  MOVF   77,W
0650:  MOVWF  39
....................       ki_a /= 50.22;
0651:  MOVF   3C,W
0652:  BSF    03.6
0653:  MOVWF  33
0654:  BCF    03.6
0655:  MOVF   3B,W
0656:  BSF    03.6
0657:  MOVWF  32
0658:  BCF    03.6
0659:  MOVF   3A,W
065A:  BSF    03.6
065B:  MOVWF  31
065C:  BCF    03.6
065D:  MOVF   39,W
065E:  BSF    03.6
065F:  MOVWF  30
0660:  MOVLW  48
0661:  MOVWF  37
0662:  MOVLW  E1
0663:  MOVWF  36
0664:  MOVLW  48
0665:  MOVWF  35
0666:  MOVLW  84
0667:  MOVWF  34
0668:  BCF    03.6
0669:  CALL   1D7
066A:  MOVF   7A,W
066B:  MOVWF  3C
066C:  MOVF   79,W
066D:  MOVWF  3B
066E:  MOVF   78,W
066F:  MOVWF  3A
0670:  MOVF   77,W
0671:  MOVWF  39
....................        ki =   ki_a;
0672:  MOVF   3C,W
0673:  MOVWF  48
0674:  MOVF   3B,W
0675:  MOVWF  47
0676:  MOVF   3A,W
0677:  MOVWF  46
0678:  MOVF   39,W
0679:  MOVWF  45
....................       
....................       setup_adc_ports(NO_ANALOGS);
067A:  BSF    03.5
067B:  BSF    03.6
067C:  MOVF   09,W
067D:  ANDLW  C0
067E:  MOVWF  09
067F:  BCF    03.6
0680:  BCF    1F.4
0681:  BCF    1F.5
0682:  MOVLW  00
0683:  BSF    03.6
0684:  MOVWF  08
....................       setup_adc_ports(sAN2 , VSS_VDD);
0685:  MOVF   09,W
0686:  ANDLW  C0
0687:  MOVWF  09
0688:  BCF    03.6
0689:  BCF    1F.4
068A:  BCF    1F.5
068B:  MOVLW  04
068C:  BSF    03.6
068D:  MOVWF  08
....................        
....................       set_adc_channel(2); 
068E:  MOVLW  08
068F:  MOVWF  78
0690:  BCF    03.5
0691:  BCF    03.6
0692:  MOVF   1F,W
0693:  ANDLW  C3
0694:  IORWF  78,W
0695:  MOVWF  1F
....................       delay_us(20);
0696:  MOVLW  1A
0697:  MOVWF  77
0698:  DECFSZ 77,F
0699:  GOTO   698
069A:  NOP
....................       kd_a = (float)read_adc();
069B:  BSF    1F.1
069C:  BTFSC  1F.1
069D:  GOTO   69C
069E:  MOVF   1E,W
069F:  MOVWF  79
06A0:  BSF    03.5
06A1:  MOVF   1E,W
06A2:  MOVWF  78
06A3:  MOVF   79,W
06A4:  MOVWF  7A
06A5:  MOVF   1E,W
06A6:  BCF    03.5
06A7:  BSF    03.6
06A8:  MOVWF  34
06A9:  MOVF   79,W
06AA:  MOVWF  35
06AB:  BCF    03.6
06AC:  CALL   023
06AD:  MOVF   7A,W
06AE:  MOVWF  40
06AF:  MOVF   79,W
06B0:  MOVWF  3F
06B1:  MOVF   78,W
06B2:  MOVWF  3E
06B3:  MOVF   77,W
06B4:  MOVWF  3D
....................       kd_a /= 50.22;
06B5:  MOVF   40,W
06B6:  BSF    03.6
06B7:  MOVWF  33
06B8:  BCF    03.6
06B9:  MOVF   3F,W
06BA:  BSF    03.6
06BB:  MOVWF  32
06BC:  BCF    03.6
06BD:  MOVF   3E,W
06BE:  BSF    03.6
06BF:  MOVWF  31
06C0:  BCF    03.6
06C1:  MOVF   3D,W
06C2:  BSF    03.6
06C3:  MOVWF  30
06C4:  MOVLW  48
06C5:  MOVWF  37
06C6:  MOVLW  E1
06C7:  MOVWF  36
06C8:  MOVLW  48
06C9:  MOVWF  35
06CA:  MOVLW  84
06CB:  MOVWF  34
06CC:  BCF    03.6
06CD:  CALL   1D7
06CE:  MOVF   7A,W
06CF:  MOVWF  40
06D0:  MOVF   79,W
06D1:  MOVWF  3F
06D2:  MOVF   78,W
06D3:  MOVWF  3E
06D4:  MOVF   77,W
06D5:  MOVWF  3D
....................        kd =   kd_a; 
06D6:  MOVF   40,W
06D7:  MOVWF  4C
06D8:  MOVF   3F,W
06D9:  MOVWF  4B
06DA:  MOVF   3E,W
06DB:  MOVWF  4A
06DC:  MOVF   3D,W
06DD:  MOVWF  49
....................       
....................        setup_adc_ports(NO_ANALOGS);
06DE:  BSF    03.5
06DF:  BSF    03.6
06E0:  MOVF   09,W
06E1:  ANDLW  C0
06E2:  MOVWF  09
06E3:  BCF    03.6
06E4:  BCF    1F.4
06E5:  BCF    1F.5
06E6:  MOVLW  00
06E7:  BSF    03.6
06E8:  MOVWF  08
.................... }
.................... 
.................... 
.................... void move_servo(unsigned long int  aci)
.................... {
.................... 
.................... aci *= 11;
*
1436:  MOVF   1B,W
1437:  MOVWF  1E
1438:  MOVF   1A,W
1439:  MOVWF  1D
143A:  CLRF   20
143B:  MOVLW  0B
143C:  MOVWF  1F
*
1451:  MOVF   79,W
1452:  MOVWF  1B
1453:  MOVF   78,W
1454:  MOVWF  1A
.................... 
.................... for(int j = 0;j < 60; j++)
1455:  CLRF   1C
1456:  MOVF   1C,W
1457:  SUBLW  3B
1458:  BTFSS  03.0
1459:  GOTO   4A6
.................... {
....................  output_high(pin_c2);
145A:  BCF    76.2
145B:  MOVF   76,W
145C:  BSF    03.5
145D:  BCF    03.6
145E:  MOVWF  07
145F:  BCF    03.5
1460:  BSF    07.2
....................  delay_us(400 + aci );  
1461:  MOVLW  90
1462:  BSF    03.6
1463:  ADDWF  1A,W
1464:  MOVWF  1D
1465:  MOVF   1B,W
1466:  MOVWF  1E
1467:  MOVLW  01
1468:  BTFSC  03.0
1469:  MOVLW  02
146A:  ADDWF  1E,F
146B:  MOVF   1E,W
146C:  MOVWF  1F
146D:  INCF   1F,F
146E:  DECF   1F,F
146F:  BTFSC  03.2
1470:  GOTO   479
1471:  MOVLW  FF
1472:  MOVWF  20
1473:  BCF    0A.4
1474:  BCF    03.6
1475:  CALL   7E6
1476:  BSF    0A.4
1477:  BSF    03.6
1478:  GOTO   46E
1479:  MOVF   1D,W
147A:  MOVWF  20
147B:  BCF    0A.4
147C:  BCF    03.6
147D:  CALL   7E6
147E:  BSF    0A.4
....................  output_low(pin_c2);
147F:  BCF    76.2
1480:  MOVF   76,W
1481:  BSF    03.5
1482:  MOVWF  07
1483:  BCF    03.5
1484:  BCF    07.2
....................  delay_us(16000 - aci);
1485:  BSF    03.6
1486:  MOVF   1A,W
1487:  SUBLW  80
1488:  MOVWF  1D
1489:  MOVLW  3E
148A:  MOVWF  1E
148B:  MOVF   1B,W
148C:  BTFSS  03.0
148D:  INCFSZ 1B,W
148E:  SUBWF  1E,F
148F:  MOVF   1E,W
1490:  MOVWF  1F
1491:  INCF   1F,F
1492:  DECF   1F,F
1493:  BTFSC  03.2
1494:  GOTO   49D
1495:  MOVLW  FF
1496:  MOVWF  20
1497:  BCF    0A.4
1498:  BCF    03.6
1499:  CALL   7E6
149A:  BSF    0A.4
149B:  BSF    03.6
149C:  GOTO   492
149D:  MOVF   1D,W
149E:  MOVWF  20
149F:  BCF    0A.4
14A0:  BCF    03.6
14A1:  CALL   7E6
14A2:  BSF    0A.4
14A3:  BSF    03.6
14A4:  INCF   1C,F
14A5:  GOTO   456
14A6:  BCF    03.6
.................... }
.................... continue;
.................... }
.................... 
.................... 
.................... double map(double value, float x_min, float x_max, float y_min, float y_max)   
.................... {                
....................     return (y_min + (((y_max - y_min)/(x_max - x_min)) * (value - x_min)));
*
12FA:  BSF    03.1
12FB:  MOVF   2B,W
12FC:  MOVWF  37
12FD:  MOVF   2A,W
12FE:  MOVWF  36
12FF:  MOVF   29,W
1300:  MOVWF  35
1301:  MOVF   28,W
1302:  MOVWF  34
1303:  MOVF   27,W
1304:  MOVWF  3B
1305:  MOVF   26,W
1306:  MOVWF  3A
1307:  MOVF   25,W
1308:  MOVWF  39
1309:  MOVF   24,W
130A:  MOVWF  38
130B:  BCF    0A.4
130C:  BSF    0A.3
130D:  BCF    03.6
130E:  CALL   10E
130F:  BSF    0A.4
1310:  BCF    0A.3
1311:  MOVF   7A,W
1312:  BSF    03.6
1313:  MOVWF  2F
1314:  MOVF   79,W
1315:  MOVWF  2E
1316:  MOVF   78,W
1317:  MOVWF  2D
1318:  MOVF   77,W
1319:  MOVWF  2C
131A:  BSF    03.1
131B:  MOVF   23,W
131C:  MOVWF  37
131D:  MOVF   22,W
131E:  MOVWF  36
131F:  MOVF   21,W
1320:  MOVWF  35
1321:  MOVF   20,W
1322:  MOVWF  34
1323:  MOVF   1F,W
1324:  MOVWF  3B
1325:  MOVF   1E,W
1326:  MOVWF  3A
1327:  MOVF   1D,W
1328:  MOVWF  39
1329:  MOVF   1C,W
132A:  MOVWF  38
132B:  BCF    0A.4
132C:  BSF    0A.3
132D:  BCF    03.6
132E:  CALL   10E
132F:  BSF    0A.4
1330:  BCF    0A.3
1331:  BSF    03.6
1332:  MOVF   2F,W
1333:  MOVWF  33
1334:  MOVF   2E,W
1335:  MOVWF  32
1336:  MOVF   2D,W
1337:  MOVWF  31
1338:  MOVF   2C,W
1339:  MOVWF  30
133A:  MOVF   7A,W
133B:  MOVWF  37
133C:  MOVF   79,W
133D:  MOVWF  36
133E:  MOVF   78,W
133F:  MOVWF  35
1340:  MOVF   77,W
1341:  MOVWF  34
1342:  BCF    0A.4
1343:  BCF    03.6
1344:  CALL   1D7
1345:  BSF    0A.4
1346:  MOVF   7A,W
1347:  BSF    03.6
1348:  MOVWF  2F
1349:  MOVF   79,W
134A:  MOVWF  2E
134B:  MOVF   78,W
134C:  MOVWF  2D
134D:  MOVF   77,W
134E:  MOVWF  2C
134F:  BSF    03.1
1350:  MOVF   1B,W
1351:  MOVWF  37
1352:  MOVF   1A,W
1353:  MOVWF  36
1354:  MOVF   19,W
1355:  MOVWF  35
1356:  MOVF   18,W
1357:  MOVWF  34
1358:  MOVF   1F,W
1359:  MOVWF  3B
135A:  MOVF   1E,W
135B:  MOVWF  3A
135C:  MOVF   1D,W
135D:  MOVWF  39
135E:  MOVF   1C,W
135F:  MOVWF  38
1360:  BCF    0A.4
1361:  BSF    0A.3
1362:  BCF    03.6
1363:  CALL   10E
1364:  BSF    0A.4
1365:  BCF    0A.3
1366:  BSF    03.6
1367:  MOVF   2F,W
1368:  MOVWF  33
1369:  MOVF   2E,W
136A:  MOVWF  32
136B:  MOVF   2D,W
136C:  MOVWF  31
136D:  MOVF   2C,W
136E:  MOVWF  30
136F:  MOVF   7A,W
1370:  MOVWF  37
1371:  MOVF   79,W
1372:  MOVWF  36
1373:  MOVF   78,W
1374:  MOVWF  35
1375:  MOVF   77,W
1376:  MOVWF  34
1377:  BCF    0A.4
1378:  BCF    03.6
1379:  CALL   042
137A:  BSF    0A.4
137B:  BCF    03.1
137C:  BSF    03.6
137D:  MOVF   27,W
137E:  MOVWF  37
137F:  MOVF   26,W
1380:  MOVWF  36
1381:  MOVF   25,W
1382:  MOVWF  35
1383:  MOVF   24,W
1384:  MOVWF  34
1385:  MOVF   7A,W
1386:  MOVWF  3B
1387:  MOVF   79,W
1388:  MOVWF  3A
1389:  MOVF   78,W
138A:  MOVWF  39
138B:  MOVF   77,W
138C:  MOVWF  38
138D:  BCF    0A.4
138E:  BSF    0A.3
138F:  BCF    03.6
1390:  CALL   10E
1391:  BSF    0A.4
1392:  BCF    0A.3
.................... } 
.................... 
.................... void pid_compute(double pos, double target)
.................... {
....................    error = (pos - target);
*
105D:  BSF    03.1
105E:  MOVF   13,W
105F:  MOVWF  37
1060:  MOVF   12,W
1061:  MOVWF  36
1062:  MOVF   11,W
1063:  MOVWF  35
1064:  MOVF   10,W
1065:  MOVWF  34
1066:  MOVF   17,W
1067:  MOVWF  3B
1068:  MOVF   16,W
1069:  MOVWF  3A
106A:  MOVF   15,W
106B:  MOVWF  39
106C:  MOVF   14,W
106D:  MOVWF  38
106E:  BCF    0A.4
106F:  BSF    0A.3
1070:  BCF    03.6
1071:  CALL   10E
1072:  BSF    0A.4
1073:  BCF    0A.3
1074:  MOVF   7A,W
1075:  MOVWF  50
1076:  MOVF   79,W
1077:  MOVWF  4F
1078:  MOVF   78,W
1079:  MOVWF  4E
107A:  MOVF   77,W
107B:  MOVWF  4D
....................    
....................    P = Kp*error;
107C:  MOVF   44,W
107D:  BSF    03.6
107E:  MOVWF  33
107F:  BCF    03.6
1080:  MOVF   43,W
1081:  BSF    03.6
1082:  MOVWF  32
1083:  BCF    03.6
1084:  MOVF   42,W
1085:  BSF    03.6
1086:  MOVWF  31
1087:  BCF    03.6
1088:  MOVF   41,W
1089:  BSF    03.6
108A:  MOVWF  30
108B:  BCF    03.6
108C:  MOVF   50,W
108D:  BSF    03.6
108E:  MOVWF  37
108F:  BCF    03.6
1090:  MOVF   4F,W
1091:  BSF    03.6
1092:  MOVWF  36
1093:  BCF    03.6
1094:  MOVF   4E,W
1095:  BSF    03.6
1096:  MOVWF  35
1097:  BCF    03.6
1098:  MOVF   4D,W
1099:  BSF    03.6
109A:  MOVWF  34
109B:  BCF    0A.4
109C:  BCF    03.6
109D:  CALL   042
109E:  BSF    0A.4
109F:  MOVF   7A,W
10A0:  MOVWF  54
10A1:  MOVF   79,W
10A2:  MOVWF  53
10A3:  MOVF   78,W
10A4:  MOVWF  52
10A5:  MOVF   77,W
10A6:  MOVWF  51
....................    
....................    if ( ! Saturation )  I = I_prec + T*Ki*error;
10A7:  MOVF   71,F
10A8:  BTFSS  03.2
10A9:  GOTO   112
10AA:  MOVLW  EC
10AB:  BSF    03.6
10AC:  MOVWF  33
10AD:  MOVLW  51
10AE:  MOVWF  32
10AF:  MOVLW  38
10B0:  MOVWF  31
10B1:  MOVLW  7B
10B2:  MOVWF  30
10B3:  BCF    03.6
10B4:  MOVF   48,W
10B5:  BSF    03.6
10B6:  MOVWF  37
10B7:  BCF    03.6
10B8:  MOVF   47,W
10B9:  BSF    03.6
10BA:  MOVWF  36
10BB:  BCF    03.6
10BC:  MOVF   46,W
10BD:  BSF    03.6
10BE:  MOVWF  35
10BF:  BCF    03.6
10C0:  MOVF   45,W
10C1:  BSF    03.6
10C2:  MOVWF  34
10C3:  BCF    0A.4
10C4:  BCF    03.6
10C5:  CALL   042
10C6:  BSF    0A.4
10C7:  MOVF   7A,W
10C8:  BSF    03.6
10C9:  MOVWF  1B
10CA:  MOVF   79,W
10CB:  MOVWF  1A
10CC:  MOVF   78,W
10CD:  MOVWF  19
10CE:  MOVF   77,W
10CF:  MOVWF  18
10D0:  MOVF   1B,W
10D1:  MOVWF  33
10D2:  MOVF   1A,W
10D3:  MOVWF  32
10D4:  MOVF   19,W
10D5:  MOVWF  31
10D6:  MOVF   18,W
10D7:  MOVWF  30
10D8:  BCF    03.6
10D9:  MOVF   50,W
10DA:  BSF    03.6
10DB:  MOVWF  37
10DC:  BCF    03.6
10DD:  MOVF   4F,W
10DE:  BSF    03.6
10DF:  MOVWF  36
10E0:  BCF    03.6
10E1:  MOVF   4E,W
10E2:  BSF    03.6
10E3:  MOVWF  35
10E4:  BCF    03.6
10E5:  MOVF   4D,W
10E6:  BSF    03.6
10E7:  MOVWF  34
10E8:  BCF    0A.4
10E9:  BCF    03.6
10EA:  CALL   042
10EB:  BSF    0A.4
10EC:  BCF    03.1
10ED:  MOVF   64,W
10EE:  BSF    03.6
10EF:  MOVWF  37
10F0:  BCF    03.6
10F1:  MOVF   63,W
10F2:  BSF    03.6
10F3:  MOVWF  36
10F4:  BCF    03.6
10F5:  MOVF   62,W
10F6:  BSF    03.6
10F7:  MOVWF  35
10F8:  BCF    03.6
10F9:  MOVF   61,W
10FA:  BSF    03.6
10FB:  MOVWF  34
10FC:  MOVF   7A,W
10FD:  MOVWF  3B
10FE:  MOVF   79,W
10FF:  MOVWF  3A
1100:  MOVF   78,W
1101:  MOVWF  39
1102:  MOVF   77,W
1103:  MOVWF  38
1104:  BCF    0A.4
1105:  BSF    0A.3
1106:  BCF    03.6
1107:  CALL   10E
1108:  BSF    0A.4
1109:  BCF    0A.3
110A:  MOVF   7A,W
110B:  MOVWF  58
110C:  MOVF   79,W
110D:  MOVWF  57
110E:  MOVF   78,W
110F:  MOVWF  56
1110:  MOVF   77,W
1111:  MOVWF  55
....................    
....................    D = (Kd/T)*(pos - pos_prec);
1112:  MOVF   4C,W
1113:  BSF    03.6
1114:  MOVWF  33
1115:  BCF    03.6
1116:  MOVF   4B,W
1117:  BSF    03.6
1118:  MOVWF  32
1119:  BCF    03.6
111A:  MOVF   4A,W
111B:  BSF    03.6
111C:  MOVWF  31
111D:  BCF    03.6
111E:  MOVF   49,W
111F:  BSF    03.6
1120:  MOVWF  30
1121:  MOVLW  EC
1122:  MOVWF  37
1123:  MOVLW  51
1124:  MOVWF  36
1125:  MOVLW  38
1126:  MOVWF  35
1127:  MOVLW  7B
1128:  MOVWF  34
1129:  BCF    0A.4
112A:  BCF    03.6
112B:  CALL   1D7
112C:  BSF    0A.4
112D:  MOVF   7A,W
112E:  BSF    03.6
112F:  MOVWF  1B
1130:  MOVF   79,W
1131:  MOVWF  1A
1132:  MOVF   78,W
1133:  MOVWF  19
1134:  MOVF   77,W
1135:  MOVWF  18
1136:  BSF    03.1
1137:  MOVF   13,W
1138:  MOVWF  37
1139:  MOVF   12,W
113A:  MOVWF  36
113B:  MOVF   11,W
113C:  MOVWF  35
113D:  MOVF   10,W
113E:  MOVWF  34
113F:  BCF    03.6
1140:  MOVF   30,W
1141:  BSF    03.6
1142:  MOVWF  3B
1143:  BCF    03.6
1144:  MOVF   2F,W
1145:  BSF    03.6
1146:  MOVWF  3A
1147:  BCF    03.6
1148:  MOVF   2E,W
1149:  BSF    03.6
114A:  MOVWF  39
114B:  BCF    03.6
114C:  MOVF   2D,W
114D:  BSF    03.6
114E:  MOVWF  38
114F:  BCF    0A.4
1150:  BSF    0A.3
1151:  BCF    03.6
1152:  CALL   10E
1153:  BSF    0A.4
1154:  BCF    0A.3
1155:  BSF    03.6
1156:  MOVF   1B,W
1157:  MOVWF  33
1158:  MOVF   1A,W
1159:  MOVWF  32
115A:  MOVF   19,W
115B:  MOVWF  31
115C:  MOVF   18,W
115D:  MOVWF  30
115E:  MOVF   7A,W
115F:  MOVWF  37
1160:  MOVF   79,W
1161:  MOVWF  36
1162:  MOVF   78,W
1163:  MOVWF  35
1164:  MOVF   77,W
1165:  MOVWF  34
1166:  BCF    0A.4
1167:  BCF    03.6
1168:  CALL   042
1169:  BSF    0A.4
116A:  MOVF   7A,W
116B:  MOVWF  5C
116C:  MOVF   79,W
116D:  MOVWF  5B
116E:  MOVF   78,W
116F:  MOVWF  5A
1170:  MOVF   77,W
1171:  MOVWF  59
....................    
....................    D = 0.56*D + 0.44*D_prec;
1172:  MOVLW  29
1173:  BSF    03.6
1174:  MOVWF  33
1175:  MOVLW  5C
1176:  MOVWF  32
1177:  MOVLW  0F
1178:  MOVWF  31
1179:  MOVLW  7E
117A:  MOVWF  30
117B:  BCF    03.6
117C:  MOVF   5C,W
117D:  BSF    03.6
117E:  MOVWF  37
117F:  BCF    03.6
1180:  MOVF   5B,W
1181:  BSF    03.6
1182:  MOVWF  36
1183:  BCF    03.6
1184:  MOVF   5A,W
1185:  BSF    03.6
1186:  MOVWF  35
1187:  BCF    03.6
1188:  MOVF   59,W
1189:  BSF    03.6
118A:  MOVWF  34
118B:  BCF    0A.4
118C:  BCF    03.6
118D:  CALL   042
118E:  BSF    0A.4
118F:  MOVF   7A,W
1190:  BSF    03.6
1191:  MOVWF  1B
1192:  MOVF   79,W
1193:  MOVWF  1A
1194:  MOVF   78,W
1195:  MOVWF  19
1196:  MOVF   77,W
1197:  MOVWF  18
1198:  MOVLW  AE
1199:  MOVWF  33
119A:  MOVLW  47
119B:  MOVWF  32
119C:  MOVLW  61
119D:  MOVWF  31
119E:  MOVLW  7D
119F:  MOVWF  30
11A0:  BCF    03.6
11A1:  MOVF   6C,W
11A2:  BSF    03.6
11A3:  MOVWF  37
11A4:  BCF    03.6
11A5:  MOVF   6B,W
11A6:  BSF    03.6
11A7:  MOVWF  36
11A8:  BCF    03.6
11A9:  MOVF   6A,W
11AA:  BSF    03.6
11AB:  MOVWF  35
11AC:  BCF    03.6
11AD:  MOVF   69,W
11AE:  BSF    03.6
11AF:  MOVWF  34
11B0:  BCF    0A.4
11B1:  BCF    03.6
11B2:  CALL   042
11B3:  BSF    0A.4
11B4:  BCF    03.1
11B5:  BSF    03.6
11B6:  MOVF   1B,W
11B7:  MOVWF  37
11B8:  MOVF   1A,W
11B9:  MOVWF  36
11BA:  MOVF   19,W
11BB:  MOVWF  35
11BC:  MOVF   18,W
11BD:  MOVWF  34
11BE:  MOVF   7A,W
11BF:  MOVWF  3B
11C0:  MOVF   79,W
11C1:  MOVWF  3A
11C2:  MOVF   78,W
11C3:  MOVWF  39
11C4:  MOVF   77,W
11C5:  MOVWF  38
11C6:  BCF    0A.4
11C7:  BSF    0A.3
11C8:  BCF    03.6
11C9:  CALL   10E
11CA:  BSF    0A.4
11CB:  BCF    0A.3
11CC:  MOVF   7A,W
11CD:  MOVWF  5C
11CE:  MOVF   79,W
11CF:  MOVWF  5B
11D0:  MOVF   78,W
11D1:  MOVWF  5A
11D2:  MOVF   77,W
11D3:  MOVWF  59
....................    
....................    U = P +I + D ;
11D4:  BCF    03.1
11D5:  MOVF   54,W
11D6:  BSF    03.6
11D7:  MOVWF  37
11D8:  BCF    03.6
11D9:  MOVF   53,W
11DA:  BSF    03.6
11DB:  MOVWF  36
11DC:  BCF    03.6
11DD:  MOVF   52,W
11DE:  BSF    03.6
11DF:  MOVWF  35
11E0:  BCF    03.6
11E1:  MOVF   51,W
11E2:  BSF    03.6
11E3:  MOVWF  34
11E4:  BCF    03.6
11E5:  MOVF   58,W
11E6:  BSF    03.6
11E7:  MOVWF  3B
11E8:  BCF    03.6
11E9:  MOVF   57,W
11EA:  BSF    03.6
11EB:  MOVWF  3A
11EC:  BCF    03.6
11ED:  MOVF   56,W
11EE:  BSF    03.6
11EF:  MOVWF  39
11F0:  BCF    03.6
11F1:  MOVF   55,W
11F2:  BSF    03.6
11F3:  MOVWF  38
11F4:  BCF    0A.4
11F5:  BSF    0A.3
11F6:  BCF    03.6
11F7:  CALL   10E
11F8:  BSF    0A.4
11F9:  BCF    0A.3
11FA:  MOVF   7A,W
11FB:  BSF    03.6
11FC:  MOVWF  1B
11FD:  MOVF   79,W
11FE:  MOVWF  1A
11FF:  MOVF   78,W
1200:  MOVWF  19
1201:  MOVF   77,W
1202:  MOVWF  18
1203:  BCF    03.1
1204:  MOVF   1B,W
1205:  MOVWF  37
1206:  MOVF   1A,W
1207:  MOVWF  36
1208:  MOVF   19,W
1209:  MOVWF  35
120A:  MOVF   18,W
120B:  MOVWF  34
120C:  BCF    03.6
120D:  MOVF   5C,W
120E:  BSF    03.6
120F:  MOVWF  3B
1210:  BCF    03.6
1211:  MOVF   5B,W
1212:  BSF    03.6
1213:  MOVWF  3A
1214:  BCF    03.6
1215:  MOVF   5A,W
1216:  BSF    03.6
1217:  MOVWF  39
1218:  BCF    03.6
1219:  MOVF   59,W
121A:  BSF    03.6
121B:  MOVWF  38
121C:  BCF    0A.4
121D:  BSF    0A.3
121E:  BCF    03.6
121F:  CALL   10E
1220:  BSF    0A.4
1221:  BCF    0A.3
1222:  MOVF   7A,W
1223:  MOVWF  60
1224:  MOVF   79,W
1225:  MOVWF  5F
1226:  MOVF   78,W
1227:  MOVWF  5E
1228:  MOVF   77,W
1229:  MOVWF  5D
....................   
....................    if ( U < Umin_rad)  {
122A:  MOVF   60,W
122B:  BSF    03.6
122C:  MOVWF  33
122D:  BCF    03.6
122E:  MOVF   5F,W
122F:  BSF    03.6
1230:  MOVWF  32
1231:  BCF    03.6
1232:  MOVF   5E,W
1233:  BSF    03.6
1234:  MOVWF  31
1235:  BCF    03.6
1236:  MOVF   5D,W
1237:  BSF    03.6
1238:  MOVWF  30
1239:  MOVLW  F8
123A:  MOVWF  37
123B:  MOVLW  53
123C:  MOVWF  36
123D:  MOVLW  93
123E:  MOVWF  35
123F:  MOVLW  7F
1240:  MOVWF  34
1241:  BCF    0A.4
1242:  BSF    0A.3
1243:  BCF    03.6
1244:  CALL   254
1245:  BSF    0A.4
1246:  BCF    0A.3
1247:  BTFSS  03.0
1248:  GOTO   254
....................                         U=Umin_rad; 
1249:  MOVLW  F8
124A:  MOVWF  60
124B:  MOVLW  53
124C:  MOVWF  5F
124D:  MOVLW  93
124E:  MOVWF  5E
124F:  MOVLW  7F
1250:  MOVWF  5D
....................                         Saturation = true;
1251:  MOVLW  01
1252:  MOVWF  71
....................                        }
1253:  GOTO   27F
....................                    
....................    else if ( U > Umax_rad)  {
1254:  MOVLW  F8
1255:  BSF    03.6
1256:  MOVWF  33
1257:  MOVLW  53
1258:  MOVWF  32
1259:  MOVLW  13
125A:  MOVWF  31
125B:  MOVLW  7F
125C:  MOVWF  30
125D:  BCF    03.6
125E:  MOVF   60,W
125F:  BSF    03.6
1260:  MOVWF  37
1261:  BCF    03.6
1262:  MOVF   5F,W
1263:  BSF    03.6
1264:  MOVWF  36
1265:  BCF    03.6
1266:  MOVF   5E,W
1267:  BSF    03.6
1268:  MOVWF  35
1269:  BCF    03.6
126A:  MOVF   5D,W
126B:  BSF    03.6
126C:  MOVWF  34
126D:  BCF    0A.4
126E:  BSF    0A.3
126F:  BCF    03.6
1270:  CALL   254
1271:  BSF    0A.4
1272:  BCF    0A.3
1273:  BTFSS  03.0
1274:  GOTO   27F
....................                              U=Umax_rad; 
1275:  MOVLW  F8
1276:  MOVWF  60
1277:  MOVLW  53
1278:  MOVWF  5F
1279:  MOVLW  13
127A:  MOVWF  5E
127B:  MOVLW  7F
127C:  MOVWF  5D
....................                              Saturation = true;
127D:  MOVLW  01
127E:  MOVWF  71
....................                             }
.................... 
....................   
....................    U=ceil(U*180/M_PI);
127F:  MOVF   60,W
1280:  BSF    03.6
1281:  MOVWF  33
1282:  BCF    03.6
1283:  MOVF   5F,W
1284:  BSF    03.6
1285:  MOVWF  32
1286:  BCF    03.6
1287:  MOVF   5E,W
1288:  BSF    03.6
1289:  MOVWF  31
128A:  BCF    03.6
128B:  MOVF   5D,W
128C:  BSF    03.6
128D:  MOVWF  30
128E:  CLRF   37
128F:  CLRF   36
1290:  MOVLW  34
1291:  MOVWF  35
1292:  MOVLW  86
1293:  MOVWF  34
1294:  BCF    0A.4
1295:  BCF    03.6
1296:  CALL   042
1297:  BSF    0A.4
1298:  MOVF   7A,W
1299:  BSF    03.6
129A:  MOVWF  1B
129B:  MOVF   79,W
129C:  MOVWF  1A
129D:  MOVF   78,W
129E:  MOVWF  19
129F:  MOVF   77,W
12A0:  MOVWF  18
12A1:  MOVF   1B,W
12A2:  MOVWF  33
12A3:  MOVF   1A,W
12A4:  MOVWF  32
12A5:  MOVF   19,W
12A6:  MOVWF  31
12A7:  MOVF   18,W
12A8:  MOVWF  30
12A9:  MOVLW  C3
12AA:  MOVWF  37
12AB:  MOVLW  F5
12AC:  MOVWF  36
12AD:  MOVLW  48
12AE:  MOVWF  35
12AF:  MOVLW  80
12B0:  MOVWF  34
12B1:  BCF    0A.4
12B2:  BCF    03.6
12B3:  CALL   1D7
12B4:  BSF    0A.4
12B5:  MOVF   7A,W
12B6:  BSF    03.6
12B7:  MOVWF  1B
12B8:  MOVF   79,W
12B9:  MOVWF  1A
12BA:  MOVF   78,W
12BB:  MOVWF  19
12BC:  MOVF   77,W
12BD:  MOVWF  18
12BE:  MOVF   1B,W
12BF:  MOVWF  1F
12C0:  MOVF   1A,W
12C1:  MOVWF  1E
12C2:  MOVF   19,W
12C3:  MOVWF  1D
12C4:  MOVF   18,W
12C5:  MOVWF  1C
12C6:  BCF    0A.4
12C7:  BSF    0A.3
12C8:  BCF    03.6
12C9:  CALL   295
12CA:  BSF    0A.4
12CB:  BCF    0A.3
12CC:  MOVF   7A,W
12CD:  MOVWF  60
12CE:  MOVF   79,W
12CF:  MOVWF  5F
12D0:  MOVF   78,W
12D1:  MOVWF  5E
12D2:  MOVF   77,W
12D3:  MOVWF  5D
....................    
....................    U=map(U, Umin, Umax, 1, 90);
12D4:  MOVF   60,W
12D5:  BSF    03.6
12D6:  MOVWF  1B
12D7:  BCF    03.6
12D8:  MOVF   5F,W
12D9:  BSF    03.6
12DA:  MOVWF  1A
12DB:  BCF    03.6
12DC:  MOVF   5E,W
12DD:  BSF    03.6
12DE:  MOVWF  19
12DF:  BCF    03.6
12E0:  MOVF   5D,W
12E1:  BSF    03.6
12E2:  MOVWF  18
12E3:  CLRF   1F
12E4:  CLRF   1E
12E5:  MOVLW  84
12E6:  MOVWF  1D
12E7:  MOVLW  85
12E8:  MOVWF  1C
12E9:  CLRF   23
12EA:  CLRF   22
12EB:  MOVLW  04
12EC:  MOVWF  21
12ED:  MOVLW  85
12EE:  MOVWF  20
12EF:  CLRF   27
12F0:  CLRF   26
12F1:  CLRF   25
12F2:  MOVLW  7F
12F3:  MOVWF  24
12F4:  CLRF   2B
12F5:  CLRF   2A
12F6:  MOVLW  34
12F7:  MOVWF  29
12F8:  MOVLW  85
12F9:  MOVWF  28
*
1393:  MOVF   7A,W
1394:  MOVWF  60
1395:  MOVF   79,W
1396:  MOVWF  5F
1397:  MOVF   78,W
1398:  MOVWF  5E
1399:  MOVF   77,W
139A:  MOVWF  5D
....................     
....................    if(U < 0) U = 1;
139B:  MOVF   60,W
139C:  BSF    03.6
139D:  MOVWF  33
139E:  BCF    03.6
139F:  MOVF   5F,W
13A0:  BSF    03.6
13A1:  MOVWF  32
13A2:  BCF    03.6
13A3:  MOVF   5E,W
13A4:  BSF    03.6
13A5:  MOVWF  31
13A6:  BCF    03.6
13A7:  MOVF   5D,W
13A8:  BSF    03.6
13A9:  MOVWF  30
13AA:  CLRF   37
13AB:  CLRF   36
13AC:  CLRF   35
13AD:  CLRF   34
13AE:  BCF    0A.4
13AF:  BSF    0A.3
13B0:  BCF    03.6
13B1:  CALL   254
13B2:  BSF    0A.4
13B3:  BCF    0A.3
13B4:  BTFSS  03.0
13B5:  GOTO   3BC
13B6:  CLRF   60
13B7:  CLRF   5F
13B8:  CLRF   5E
13B9:  MOVLW  7F
13BA:  MOVWF  5D
13BB:  GOTO   3E1
....................    else if (U > 90) U = 90;
13BC:  BSF    03.6
13BD:  CLRF   33
13BE:  CLRF   32
13BF:  MOVLW  34
13C0:  MOVWF  31
13C1:  MOVLW  85
13C2:  MOVWF  30
13C3:  BCF    03.6
13C4:  MOVF   60,W
13C5:  BSF    03.6
13C6:  MOVWF  37
13C7:  BCF    03.6
13C8:  MOVF   5F,W
13C9:  BSF    03.6
13CA:  MOVWF  36
13CB:  BCF    03.6
13CC:  MOVF   5E,W
13CD:  BSF    03.6
13CE:  MOVWF  35
13CF:  BCF    03.6
13D0:  MOVF   5D,W
13D1:  BSF    03.6
13D2:  MOVWF  34
13D3:  BCF    0A.4
13D4:  BSF    0A.3
13D5:  BCF    03.6
13D6:  CALL   254
13D7:  BSF    0A.4
13D8:  BCF    0A.3
13D9:  BTFSS  03.0
13DA:  GOTO   3E1
13DB:  CLRF   60
13DC:  CLRF   5F
13DD:  MOVLW  34
13DE:  MOVWF  5E
13DF:  MOVLW  85
13E0:  MOVWF  5D
....................    
....................    
....................    if (abs(error) > 0.02 ) move_servo((unsigned long int)ceil(U));
13E1:  MOVF   4D,W
13E2:  MOVWF  77
13E3:  MOVF   4E,W
13E4:  MOVWF  78
13E5:  MOVF   4F,W
13E6:  MOVWF  79
13E7:  MOVF   50,W
13E8:  MOVWF  7A
13E9:  BCF    78.7
13EA:  MOVF   7A,W
13EB:  BSF    03.6
13EC:  MOVWF  1B
13ED:  MOVF   79,W
13EE:  MOVWF  1A
13EF:  MOVF   78,W
13F0:  MOVWF  19
13F1:  MOVF   77,W
13F2:  MOVWF  18
13F3:  MOVLW  0A
13F4:  MOVWF  33
13F5:  MOVLW  D7
13F6:  MOVWF  32
13F7:  MOVLW  23
13F8:  MOVWF  31
13F9:  MOVLW  79
13FA:  MOVWF  30
13FB:  MOVF   1B,W
13FC:  MOVWF  37
13FD:  MOVF   1A,W
13FE:  MOVWF  36
13FF:  MOVF   19,W
1400:  MOVWF  35
1401:  MOVF   18,W
1402:  MOVWF  34
1403:  BCF    0A.4
1404:  BSF    0A.3
1405:  BCF    03.6
1406:  CALL   254
1407:  BSF    0A.4
1408:  BCF    0A.3
1409:  BTFSS  03.0
140A:  GOTO   4A7
140B:  MOVF   60,W
140C:  BSF    03.6
140D:  MOVWF  1F
140E:  BCF    03.6
140F:  MOVF   5F,W
1410:  BSF    03.6
1411:  MOVWF  1E
1412:  BCF    03.6
1413:  MOVF   5E,W
1414:  BSF    03.6
1415:  MOVWF  1D
1416:  BCF    03.6
1417:  MOVF   5D,W
1418:  BSF    03.6
1419:  MOVWF  1C
141A:  BCF    0A.4
141B:  BSF    0A.3
141C:  BCF    03.6
141D:  CALL   295
141E:  BSF    0A.4
141F:  BCF    0A.3
1420:  MOVF   7A,W
1421:  BSF    03.6
1422:  MOVWF  33
1423:  MOVF   79,W
1424:  MOVWF  32
1425:  MOVF   78,W
1426:  MOVWF  31
1427:  MOVF   77,W
1428:  MOVWF  30
1429:  BCF    0A.4
142A:  BCF    03.6
142B:  CALL   7C5
142C:  BSF    0A.4
142D:  MOVF   79,W
142E:  BSF    03.6
142F:  MOVWF  19
1430:  MOVF   78,W
1431:  MOVWF  18
1432:  MOVF   19,W
1433:  MOVWF  1B
1434:  MOVF   18,W
1435:  MOVWF  1A
....................    
.................... }
.................... 
.................... 
.................... #task(rate = 50ms, max = 10ms)                  // 1st RTOS task (executed every 250ms)
.................... void led1(){
....................  
....................     read_target();
....................     read_pos();
....................     restart_wdt();
*
01CE:  CLRWDT
01CF:  MOVLW  B9
01D0:  MOVWF  25
01D1:  MOVLW  00
01D2:  MOVWF  26
01D3:  BSF    0A.3
01D4:  BCF    0A.4
01D5:  BCF    03.5
01D6:  GOTO   720
....................    
.................... }
.................... 
.................... 
.................... 
.................... #task(rate = 100ms, max = 10ms)                  // 2nd RTOS task (executed every 500ms)
.................... void led3(){
....................  
....................      get_pid_gains();
....................      lcd_send_byte(0,0x0f);
*
06E9:  BCF    03.6
06EA:  CLRF   67
06EB:  MOVLW  0F
06EC:  MOVWF  68
06ED:  BCF    03.5
06EE:  CALL   2A3
....................      lcd_gotoxy(1,1); 
06EF:  MOVLW  01
06F0:  BSF    03.5
06F1:  MOVWF  63
06F2:  MOVWF  64
.................... 
....................      printf(lcd_putc,"T:%f D:%f", (float)target, (float)pos);  
*
0705:  MOVLW  54
0706:  BSF    03.5
0707:  MOVWF  62
0708:  BCF    03.5
0709:  CALL   3C9
070A:  MOVLW  3A
070B:  BSF    03.5
070C:  MOVWF  62
070D:  BCF    03.5
070E:  CALL   3C9
070F:  MOVLW  89
0710:  MOVWF  04
0711:  MOVF   24,W
0712:  BSF    03.5
0713:  MOVWF  58
0714:  BCF    03.5
0715:  MOVF   23,W
0716:  BSF    03.5
0717:  MOVWF  57
0718:  BCF    03.5
0719:  MOVF   22,W
071A:  BSF    03.5
071B:  MOVWF  56
071C:  BCF    03.5
071D:  MOVF   21,W
071E:  BSF    03.5
071F:  MOVWF  55
0720:  MOVLW  02
0721:  MOVWF  59
0722:  BCF    03.5
0723:  CALL   495
0724:  MOVLW  20
0725:  BSF    03.5
0726:  MOVWF  62
0727:  BCF    03.5
0728:  CALL   3C9
0729:  MOVLW  44
072A:  BSF    03.5
072B:  MOVWF  62
072C:  BCF    03.5
072D:  CALL   3C9
072E:  MOVLW  3A
072F:  BSF    03.5
0730:  MOVWF  62
0731:  BCF    03.5
0732:  CALL   3C9
0733:  MOVLW  89
0734:  MOVWF  04
0735:  MOVF   2C,W
0736:  BSF    03.5
0737:  MOVWF  58
0738:  BCF    03.5
0739:  MOVF   2B,W
073A:  BSF    03.5
073B:  MOVWF  57
073C:  BCF    03.5
073D:  MOVF   2A,W
073E:  BSF    03.5
073F:  MOVWF  56
0740:  BCF    03.5
0741:  MOVF   29,W
0742:  BSF    03.5
0743:  MOVWF  55
0744:  MOVLW  02
0745:  MOVWF  59
0746:  BCF    03.5
0747:  CALL   495
....................      lcd_gotoxy(1,2);
0748:  MOVLW  01
0749:  BSF    03.5
074A:  MOVWF  63
074B:  MOVLW  02
074C:  MOVWF  64
....................      printf(lcd_putc,"p:%fd:%fi:%f",kp, ki ,kd);
*
075F:  MOVLW  70
0760:  BSF    03.5
0761:  MOVWF  62
0762:  BCF    03.5
0763:  CALL   3C9
0764:  MOVLW  3A
0765:  BSF    03.5
0766:  MOVWF  62
0767:  BCF    03.5
0768:  CALL   3C9
0769:  MOVLW  89
076A:  MOVWF  04
076B:  MOVF   44,W
076C:  BSF    03.5
076D:  MOVWF  58
076E:  BCF    03.5
076F:  MOVF   43,W
0770:  BSF    03.5
0771:  MOVWF  57
0772:  BCF    03.5
0773:  MOVF   42,W
0774:  BSF    03.5
0775:  MOVWF  56
0776:  BCF    03.5
0777:  MOVF   41,W
0778:  BSF    03.5
0779:  MOVWF  55
077A:  MOVLW  02
077B:  MOVWF  59
077C:  BCF    03.5
077D:  CALL   495
077E:  MOVLW  64
077F:  BSF    03.5
0780:  MOVWF  62
0781:  BCF    03.5
0782:  CALL   3C9
0783:  MOVLW  3A
0784:  BSF    03.5
0785:  MOVWF  62
0786:  BCF    03.5
0787:  CALL   3C9
0788:  MOVLW  89
0789:  MOVWF  04
078A:  MOVF   48,W
078B:  BSF    03.5
078C:  MOVWF  58
078D:  BCF    03.5
078E:  MOVF   47,W
078F:  BSF    03.5
0790:  MOVWF  57
0791:  BCF    03.5
0792:  MOVF   46,W
0793:  BSF    03.5
0794:  MOVWF  56
0795:  BCF    03.5
0796:  MOVF   45,W
0797:  BSF    03.5
0798:  MOVWF  55
0799:  MOVLW  02
079A:  MOVWF  59
079B:  BCF    03.5
079C:  CALL   495
079D:  MOVLW  69
079E:  BSF    03.5
079F:  MOVWF  62
07A0:  BCF    03.5
07A1:  CALL   3C9
07A2:  MOVLW  3A
07A3:  BSF    03.5
07A4:  MOVWF  62
07A5:  BCF    03.5
07A6:  CALL   3C9
07A7:  MOVLW  89
07A8:  MOVWF  04
07A9:  MOVF   4C,W
07AA:  BSF    03.5
07AB:  MOVWF  58
07AC:  BCF    03.5
07AD:  MOVF   4B,W
07AE:  BSF    03.5
07AF:  MOVWF  57
07B0:  BCF    03.5
07B1:  MOVF   4A,W
07B2:  BSF    03.5
07B3:  MOVWF  56
07B4:  BCF    03.5
07B5:  MOVF   49,W
07B6:  BSF    03.5
07B7:  MOVWF  55
07B8:  MOVLW  02
07B9:  MOVWF  59
07BA:  BCF    03.5
07BB:  CALL   495
07BC:  MOVLW  B6
07BD:  BSF    03.5
07BE:  MOVWF  2C
07BF:  MOVLW  05
07C0:  MOVWF  2D
07C1:  BSF    0A.3
07C2:  BCF    0A.4
07C3:  BCF    03.5
07C4:  GOTO   720
.................... }
.................... 
.................... 
.................... #task(rate = 50ms, max = 10ms)                  // 2nd RTOS task (executed every 500ms)
.................... void led4(){
....................  
....................    printf("%f,%f\n",target,pos);
*
1000:  MOVLW  89
1001:  MOVWF  04
1002:  MOVF   24,W
1003:  BSF    03.6
1004:  MOVWF  13
1005:  BCF    03.6
1006:  MOVF   23,W
1007:  BSF    03.6
1008:  MOVWF  12
1009:  BCF    03.6
100A:  MOVF   22,W
100B:  BSF    03.6
100C:  MOVWF  11
100D:  BCF    03.6
100E:  MOVF   21,W
100F:  BSF    03.6
1010:  MOVWF  10
1011:  MOVLW  02
1012:  BSF    03.5
1013:  BCF    03.6
1014:  MOVWF  6F
1015:  BCF    0A.4
1016:  BSF    0A.3
1017:  BCF    03.5
1018:  CALL   000
1019:  BSF    0A.4
101A:  BCF    0A.3
101B:  MOVLW  2C
101C:  BTFSS  0C.4
101D:  GOTO   01C
101E:  MOVWF  19
101F:  MOVLW  89
1020:  MOVWF  04
1021:  MOVF   2C,W
1022:  BSF    03.6
1023:  MOVWF  13
1024:  BCF    03.6
1025:  MOVF   2B,W
1026:  BSF    03.6
1027:  MOVWF  12
1028:  BCF    03.6
1029:  MOVF   2A,W
102A:  BSF    03.6
102B:  MOVWF  11
102C:  BCF    03.6
102D:  MOVF   29,W
102E:  BSF    03.6
102F:  MOVWF  10
1030:  MOVLW  02
1031:  BSF    03.5
1032:  BCF    03.6
1033:  MOVWF  6F
1034:  BCF    0A.4
1035:  BSF    0A.3
1036:  BCF    03.5
1037:  CALL   000
1038:  BSF    0A.4
1039:  BCF    0A.3
103A:  MOVLW  0A
103B:  BTFSS  0C.4
103C:  GOTO   03B
103D:  MOVWF  19
....................    pid_compute(pos, target);
103E:  MOVF   2C,W
103F:  BSF    03.6
1040:  MOVWF  13
1041:  BCF    03.6
1042:  MOVF   2B,W
1043:  BSF    03.6
1044:  MOVWF  12
1045:  BCF    03.6
1046:  MOVF   2A,W
1047:  BSF    03.6
1048:  MOVWF  11
1049:  BCF    03.6
104A:  MOVF   29,W
104B:  BSF    03.6
104C:  MOVWF  10
104D:  BCF    03.6
104E:  MOVF   24,W
104F:  BSF    03.6
1050:  MOVWF  17
1051:  BCF    03.6
1052:  MOVF   23,W
1053:  BSF    03.6
1054:  MOVWF  16
1055:  BCF    03.6
1056:  MOVF   22,W
1057:  BSF    03.6
1058:  MOVWF  15
1059:  BCF    03.6
105A:  MOVF   21,W
105B:  BSF    03.6
105C:  MOVWF  14
....................    
....................    I_prec = I;
*
14A7:  MOVF   58,W
14A8:  MOVWF  64
14A9:  MOVF   57,W
14AA:  MOVWF  63
14AB:  MOVF   56,W
14AC:  MOVWF  62
14AD:  MOVF   55,W
14AE:  MOVWF  61
....................    pos_prec = pos;
14AF:  MOVF   2C,W
14B0:  MOVWF  30
14B1:  MOVF   2B,W
14B2:  MOVWF  2F
14B3:  MOVF   2A,W
14B4:  MOVWF  2E
14B5:  MOVF   29,W
14B6:  MOVWF  2D
....................    D_prec = D;
14B7:  MOVF   5C,W
14B8:  MOVWF  6C
14B9:  MOVF   5B,W
14BA:  MOVWF  6B
14BB:  MOVF   5A,W
14BC:  MOVWF  6A
14BD:  MOVF   59,W
14BE:  MOVWF  69
....................    target_prec = target;
14BF:  MOVF   24,W
14C0:  MOVWF  28
14C1:  MOVF   23,W
14C2:  MOVWF  27
14C3:  MOVF   22,W
14C4:  MOVWF  26
14C5:  MOVF   21,W
14C6:  MOVWF  25
....................    error_prec = error;
14C7:  MOVF   50,W
14C8:  MOVWF  70
14C9:  MOVF   4F,W
14CA:  MOVWF  6F
14CB:  MOVF   4E,W
14CC:  MOVWF  6E
14CD:  MOVF   4D,W
14CE:  MOVWF  6D
14CF:  MOVLW  00
14D0:  BSF    03.5
14D1:  MOVWF  33
14D2:  MOVLW  10
14D3:  MOVWF  34
14D4:  BSF    0A.3
14D5:  BCF    0A.4
14D6:  BCF    03.5
14D7:  GOTO   720
.................... 
.................... }
.................... 
.................... 
....................  
.................... 
.................... 
.................... void main(void)
*
0D4D:  MOVF   03,W
0D4E:  ANDLW  1F
0D4F:  MOVWF  03
0D50:  BSF    03.5
0D51:  BSF    03.6
0D52:  BSF    07.3
0D53:  MOVLW  A0
0D54:  BCF    03.6
0D55:  MOVWF  19
0D56:  MOVLW  01
0D57:  MOVWF  1A
0D58:  MOVLW  A6
0D59:  MOVWF  18
0D5A:  MOVLW  90
0D5B:  BCF    03.5
0D5C:  MOVWF  18
0D5D:  CLRF   38
0D5E:  CLRF   37
0D5F:  CLRF   36
0D60:  CLRF   35
0D61:  CLRF   3C
0D62:  CLRF   3B
0D63:  CLRF   3A
0D64:  CLRF   39
0D65:  CLRF   40
0D66:  CLRF   3F
0D67:  CLRF   3E
0D68:  CLRF   3D
0D69:  CLRF   44
0D6A:  CLRF   43
0D6B:  MOVLW  50
0D6C:  MOVWF  42
0D6D:  MOVLW  82
0D6E:  MOVWF  41
0D6F:  MOVLW  CD
0D70:  MOVWF  48
0D71:  MOVLW  CC
0D72:  MOVWF  47
0D73:  MOVLW  0C
0D74:  MOVWF  46
0D75:  MOVLW  7F
0D76:  MOVWF  45
0D77:  MOVLW  9A
0D78:  MOVWF  4C
0D79:  MOVLW  99
0D7A:  MOVWF  4B
0D7B:  MOVLW  49
0D7C:  MOVWF  4A
0D7D:  MOVLW  81
0D7E:  MOVWF  49
0D7F:  CLRF   50
0D80:  CLRF   4F
0D81:  CLRF   4E
0D82:  CLRF   4D
0D83:  CLRF   54
0D84:  CLRF   53
0D85:  CLRF   52
0D86:  CLRF   51
0D87:  CLRF   58
0D88:  CLRF   57
0D89:  CLRF   56
0D8A:  CLRF   55
0D8B:  CLRF   5C
0D8C:  CLRF   5B
0D8D:  CLRF   5A
0D8E:  CLRF   59
0D8F:  CLRF   60
0D90:  CLRF   5F
0D91:  CLRF   5E
0D92:  CLRF   5D
0D93:  CLRF   64
0D94:  CLRF   63
0D95:  CLRF   62
0D96:  CLRF   61
0D97:  CLRF   68
0D98:  CLRF   67
0D99:  CLRF   66
0D9A:  CLRF   65
0D9B:  CLRF   6C
0D9C:  CLRF   6B
0D9D:  CLRF   6A
0D9E:  CLRF   69
0D9F:  CLRF   70
0DA0:  CLRF   6F
0DA1:  CLRF   6E
0DA2:  CLRF   6D
0DA3:  CLRF   73
0DA4:  CLRF   72
0DA5:  CLRF   75
0DA6:  CLRF   74
0DA7:  MOVLW  FF
0DA8:  MOVWF  76
0DA9:  CLRF   7C
0DAA:  CLRF   7B
0DAB:  BSF    03.5
0DAC:  BSF    03.6
0DAD:  MOVF   09,W
0DAE:  ANDLW  C0
0DAF:  MOVWF  09
0DB0:  BCF    03.6
0DB1:  BCF    1F.4
0DB2:  BCF    1F.5
0DB3:  MOVLW  00
0DB4:  BSF    03.6
0DB5:  MOVWF  08
0DB6:  BCF    03.5
0DB7:  CLRF   07
0DB8:  CLRF   08
0DB9:  CLRF   09
0DBA:  BCF    03.7
.................... {
.................... 
....................    setup_wdt(WDT_OFF);
0DBB:  BCF    05.0
....................    
....................   
....................    lcd_init();
0DBC:  BCF    03.6
0DBD:  GOTO   48B
....................    lcd_putc("\fReady...\n");
0DBE:  MOVLW  F7
0DBF:  BSF    03.6
0DC0:  MOVWF  0D
0DC1:  MOVLW  07
0DC2:  MOVWF  0F
....................    setup_adc(ADC_CLOCK_INTERNAL);
*
0E38:  BCF    03.6
0E39:  BSF    1F.6
0E3A:  BSF    1F.7
0E3B:  BSF    03.5
0E3C:  BSF    1F.7
0E3D:  BCF    03.5
0E3E:  BSF    1F.0
....................    lcd_putc("\fBALL - BEAM ");
0E3F:  MOVLW  84
0E40:  BSF    03.6
0E41:  MOVWF  0D
0E42:  MOVLW  0C
0E43:  MOVWF  0F
....................    
.................... 
....................    rtos_run();
*
0EB9:  BSF    03.5
0EBA:  BCF    03.6
0EBB:  CLRF   20
0EBC:  CLRF   22
0EBD:  MOVLW  05
0EBE:  MOVWF  21
0EBF:  CLRF   24
0EC0:  CLRF   23
0EC1:  MOVLW  B9
0EC2:  MOVWF  25
0EC3:  MOVLW  00
0EC4:  MOVWF  26
0EC5:  CLRF   27
0EC6:  CLRF   29
0EC7:  MOVLW  0A
0EC8:  MOVWF  28
0EC9:  CLRF   2B
0ECA:  MOVLW  02
0ECB:  MOVWF  2A
0ECC:  MOVLW  B6
0ECD:  MOVWF  2C
0ECE:  MOVLW  05
0ECF:  MOVWF  2D
0ED0:  CLRF   2E
0ED1:  CLRF   30
0ED2:  MOVLW  05
0ED3:  MOVWF  2F
0ED4:  CLRF   32
0ED5:  MOVLW  01
0ED6:  MOVWF  31
0ED7:  MOVLW  00
0ED8:  MOVWF  33
0ED9:  MOVLW  10
0EDA:  MOVWF  34
0EDB:  BCF    03.5
0EDC:  CLRF   20
0EDD:  MOVLW  00
0EDE:  MOVWF  78
0EDF:  MOVF   78,W
0EE0:  IORLW  06
0EE1:  MOVWF  12
0EE2:  MOVLW  F9
0EE3:  BSF    03.5
0EE4:  MOVWF  12
0EE5:  BCF    03.5
0EE6:  BCF    0C.1
0EE7:  BCF    03.0
0EE8:  RLF    20,W
0EE9:  MOVWF  77
0EEA:  BCF    0A.3
0EEB:  CALL   004
0EEC:  BSF    0A.3
0EED:  MOVWF  79
0EEE:  MOVLW  01
0EEF:  ADDWF  77,W
0EF0:  BCF    0A.3
0EF1:  CALL   004
0EF2:  BSF    0A.3
0EF3:  MOVWF  7A
0EF4:  MOVF   79,W
0EF5:  MOVWF  04
0EF6:  BCF    03.7
0EF7:  BTFSC  7A.0
0EF8:  BSF    03.7
0EF9:  MOVF   00,W
0EFA:  MOVWF  79
0EFB:  INCF   04,F
0EFC:  MOVF   00,W
0EFD:  MOVWF  77
0EFE:  INCF   04,F
0EFF:  MOVF   00,W
0F00:  MOVWF  78
0F01:  INCF   04,F
0F02:  INCF   00,F
0F03:  MOVF   00,W
0F04:  MOVWF  7A
0F05:  BTFSS  03.2
0F06:  GOTO   70A
0F07:  INCF   04,F
0F08:  INCF   00,F
0F09:  DECF   04,F
0F0A:  INCF   04,F
0F0B:  MOVF   00,W
0F0C:  SUBWF  78,W
0F0D:  BTFSS  03.2
0F0E:  GOTO   722
0F0F:  MOVF   77,W
0F10:  SUBWF  7A,W
0F11:  BTFSS  03.2
0F12:  GOTO   722
0F13:  DECF   04,F
0F14:  CLRF   00
0F15:  INCF   04,F
0F16:  CLRF   00
0F17:  INCF   04,F
0F18:  BTFSC  79.7
0F19:  GOTO   722
0F1A:  INCF   04,F
0F1B:  MOVF   00,W
0F1C:  MOVWF  0A
0F1D:  DECF   04,F
0F1E:  MOVF   00,W
0F1F:  MOVWF  02
0F20:  BCF    03.5
0F21:  BCF    03.6
0F22:  INCF   20,F
0F23:  MOVLW  03
0F24:  SUBWF  20,W
0F25:  BTFSS  03.2
0F26:  GOTO   6E7
0F27:  CLRF   20
0F28:  BTFSC  0C.1
0F29:  GOTO   6E6
0F2A:  GOTO   728
0F2B:  MOVLW  FF
0F2C:  MOVWF  20
.................... 
....................    set_tris_d(0x0); 
0F2D:  MOVLW  00
0F2E:  BSF    03.5
0F2F:  MOVWF  08
.................... 
....................  
....................      
....................    while(1)
....................    {
0F30:  GOTO   730
....................   
....................    }
....................    
.................... }
.................... 
0F31:  SLEEP
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 

Configuration Fuses:
   Word  1: 2FEA   HS WDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
